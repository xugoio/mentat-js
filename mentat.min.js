

var MentatJS = {
    version: "0.0.1",
    defaults: {}
};



(function () {
    var initializing = false, fnTest = /xyz/.test(function () { xyz; }) ? /\b_super\b/ : /.*/;

    // The base Class implementation (does nothing)
    this.Class = function () { };

    // Create a new Class that inherits from this class
    Class.extend = function (prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function" &&
            typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                (function (name, fn) {
                    return function () {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
                prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the init method
            if (!initializing && this.init)
                this.init.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = arguments.callee;

        return Class;
    };
})();// Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18
if (!Array.prototype.contains) {
    Array.prototype.contains = function (string) {
        var O = Object(this);
        for (var i = 0; i < O.length; i++) {
            if (O[i]===string)
                return true;
        }
        return false;
    };
}


if (!Array.prototype.forEach) {

    Array.prototype.forEach = function(callback, thisArg) {

        var T, k;

        if (this == null) {
            throw new TypeError(' this is null or not defined');
        }

        // 1. Let O be the result of calling toObject() passing the
        // |this| value as the argument.
        var O = Object(this);

        // 2. Let lenValue be the result of calling the Get() internal
        // method of O with the argument "length".
        // 3. Let len be toUint32(lenValue).
        var len = O.length >>> 0;

        // 4. If isCallable(callback) is false, throw a TypeError
        //exception. // See: http://es5.github.com/#x9.11
        if (typeof callback !== "function") {
            throw new TypeError(callback + ' is not a function');
        }

        // 5. If thisArg was supplied, let T be thisArg; else let
        // T be undefined.
        if (arguments.length > 1) {
            T = thisArg;
        }

        // 6. Let k be 0
        k = 0;

        // 7. Repeat, while k < len
        while (k < len) {

            var kValue;

            // a. Let Pk be ToString(k).
            //    This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty
            //    internal method of O with argument Pk.
            //    This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {

                // i. Let kValue be the result of calling the Get internal
                // method of O with argument Pk.
                kValue = O[k];

                // ii. Call the Call internal method of callback with T as
                // the this value and argument list containing kValue, k, and O.
                callback.call(T, kValue, k, O);
            }
            // d. Increase k by 1.
            k++;
        }
        // 8. return undefined
    };
}



function generatev4UUID(){
    var d = new Date().getTime();
    if(window.performance && typeof window.performance.now === "function"){
        d += performance.now(); //use high-precision timer if available
    }
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (d + Math.random()*16)%16 | 0;
        d = Math.floor(d/16);
        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
    });
    return uuid;
}

function BrowsingDevice() {
    var
        ua =  navigator.userAgent,
        browser = /Edge\/\d+/.test(ua) ? 'ed' : /MSIE 9/.test(ua) ? 'ie9' : /MSIE 10/.test(ua) ? 'ie10' : /MSIE 11/.test(ua) ? 'ie11' : /MSIE\s\d/.test(ua) ? 'ie?' : /rv\:11/.test(ua) ? 'ie11' : /Firefox\W\d/.test(ua) ? 'ff' : /Chrom(e|ium)\W\d|CriOS\W\d/.test(ua) ? 'gc' : /\bSafari\W\d/.test(ua) ? 'sa' : /\bOpera\W\d/.test(ua) ? 'op' : /\bOPR\W\d/i.test(ua) ? 'op' : typeof MSPointerEvent !== 'undefined' ? 'ie?' : '',
        os =  /Windows NT 10/.test(ua) ? "win10" : /Windows NT 6\.0/.test(ua) ? "winvista" : /Windows NT 6\.1/.test(ua) ? "win7" : /Windows NT 6\.\d/.test(ua) ? "win8" : /Windows NT 5\.1/.test(ua) ? "winxp" : /Windows NT [1-5]\./.test(ua) ? "winnt" : /Mac/.test(ua) ? "mac" : /Linux/.test(ua) ? "linux" : /X11/.test(ua) ? "nix" : "",
        touch =  'ontouchstart' in document.documentElement,
        mobile = /IEMobile|Windows Phone|Lumia/i.test(ua) ? 'w' : /iPhone|iP[oa]d/.test(ua) ? 'i' : /Android/.test(ua) ? 'a' : /BlackBerry|PlayBook|BB10/.test(ua) ? 'b' : /Mobile Safari/.test(ua) ? 's' : /webOS|Mobile|Tablet|Opera Mini|\bCrMo\/|Opera Mobi/i.test(ua) ? 1 : 0,
        tablet =  /Tablet|iPad/i.test(ua);
    var ret = { ua: ua, browser: browser, os: os, touch: touch, mobile: mobile, tablet:tablet};
    return ret;
}


MentatJS.kEvent_Runtime = 0x00;
MentatJS.kEvent_User = 0x01;


MentatJS.Application = Class.extend ({

    navigationController : null,
    notifications : [],
    appName : '',
    rootView : null,
    downloadStack : null,
    downloadCache : null,

    

    resetNotification : function ()  {
        this.notifications = new Array();
    },


    wipeAndReload : function () {
        window.location.href = '/';
        return;
    },


    launch : function  () {
        this.navigationController = null;
        this.appName = "";
        this.rootView = null;
        this.notifications = new Array();
        this.downloadStack = new Array();
        this.downloadCache = new Array();

        this.navigationControllerDeclaration = MentatJS.NavigationController.extend({
            willInit () {

            }
        });


        // desktop
        this.viewDeclaration = MentatJS.View.extend({

            boundsForView (parentBounds,oldBounds) {
                var bounds =
                {
                    x : 0,
                    y : 0,
                    width : document.documentElement.clientWidth,
                    height : document.documentElement.clientHeight,
                    unit : 'px',
                    position: 'absolute'
                }

                var bd = BrowsingDevice();
                if (bd.mobile!=0) {
                    bounds.width = document.documentElement.clientWidth;
                    bounds.height = document.documentElement.clientHeight;
                }

                return bounds;

            }

        });
        this.navigationController = new this.navigationControllerDeclaration();
        this.rootView = new this.viewDeclaration();
        this.navigationController.initNavigationControllerWithRootView('UINavigationController.instance',this.rootView);
        this.navigationController.rootView.initView('rootView');
        document.getElementsByTagName('body')[0].appendChild(this.navigationController.rootView.getDiv());
        this.navigationController.rootView.doResize();
        MentatJS.Application.instance = this;
        this.applicationWillStart();
    },

    applicationWillStart : function () {
        throw 'Application.applicationWillStart must be overridden.';
    },

    deregisterForNotification : function (notification,obj_id) {
        var idx = -1;
        console.log('-REG ' + obj_id + '.' + notification);
        for (var i = 0; i < this.notifications.length; i++) {
            if (this.notifications[i].notification == notification && this.notifications[i].target.id == obj_id)
                var idx = i;
        }
        if (idx > -1) {
            this.notifications.splice(idx, 1);
        }
    },


    registerForNotification : function (notification, obj) {
        var not = { notification: notification, target: obj};
        console.log ('+REG ' + obj.id + '.' + notification);
        this.notifications.push(not);
    },

    notifyAll : function (sender,notification,param) {
        console.log('+EV ' + notification);
        for (var i = 0; i < this.notifications.length; i++) {
            if (this.notifications[i].notification == notification) {
                console.log('    calling ' + this.notifications[i].target.id + "." + notification);
                this.notifications[i].target[notification](sender,param);
            }
        }
    },


    session_event: function (event_type, event_name, event_param) {

        var id = generatev4UUID();

        var event = {
            id: id,
            token: this.token,
            app: this.appName,
            type: event_type,
            name: event_name,
            params: event_param,
            timestamp: new moment()
        };

        //var uri = this.baseAddress + "/sessionlogger/event/" + id;
        //FrameworkUI.PostDataWithDelegate(id,uri,JSON.stringify(event),this);
    },

    cacheContains: function (cacheID) {
        for (var i = 0; i < this.downloadCache.length; i++) {
            if (this.downloadCache[i].id==cacheID)
                return this.downloadCache[i];
        }
        return null;
    },

    cache : function (cacheID, object) {
        var obj = object;
        obj.id = cacheID;
        obj.timestamp = + new Date();

        // update if exists
        for (var i = 0; i < this.downloadCache.length; i++) {
            if (this.downloadCache[i].id==cacheID) {
                this.downloadCache[i] = obj;
                return;
            }
        }
        this.downloadCache.push(obj);


    }



});



MentatJS.DataSource = Class.extend({
    dataSourceID : '',
    dataString : '',
    mainData : new Array(),
    sortedData : new Array(),
    dataLastUpdated: null,


    initWithDataString: function (_str) {

        this.dataString = _str;
        var json = {};
        json = JSON.parse(_str);
        this.dataLastUpdated = new Date();

        if ( json.valid==false) {
            this.mainData = [];
            this.sortedData = [];
        } else {
            this.mainData = this.arrayPath(json);
            this.reindex();
        }


    },
    arrayPath: function (json) {
        return json.rows;
    },

    objectForSortedIndex: function (index) {
        return this._objectAtIndex(this.sortedData[index]);
    },

    _objectAtIndex: function (index) {
        if (index<0) return null;
        if (index>=this.mainData.length) return null;
        return this.mainData[index];
    },

    idForObject: function (item) {
        return item.uniqueintid;
    },

    sortFieldForObject: function (item) { // override to sort on name member
        return item.uniqueintid;
    },

    applyFilter: function (value,fn_filter) {
        var i = this.mainData.length;
        while (i>0) {
            if (fn_filter(value,this.mainData[i-1])==false) {
                this.mainData.splice(i-1,1);
                i = this.mainData.length;
            } else {
                i--;
            }
        }
        this.reindex();
    },


    numberOfItems: function () {
        return this.mainData.length;
    },

    filterForObject: function (item) {
        return true;
    },


    quickFind: function (uniqueintid) {
        var currentIndex = -1
        var range = [0,this.mainData.length-1];
        var nbJumps = 0;
        while (1) {
            nbJumps++;

            currentIndex = range[0] + (range[1] - range[0]) / 2;

            var _id = this.idForObject(this._objectAtIndex(currentIndex));

            if (_id == uniqueintid) {
                console.log('found ' +id + ' in ' + nbJumps + ' jumps');
                return this.objectAtIndex(currentIndex);
            }
            if (_id < id) {
                range = [currentIndex,this.mainData.length-1];
            }
            if (_id > id) {
                range[1] = currentIndex-1;
            }
            if (range[0]==range[1]) return null;
        }


    },




    reindex: function () {

        this.sortedData = new Array();

        for ( var i = 0; i < this.mainData.length; i++ ) {
            this.mainData[i].uniqueintid = i;
            if (this.filterForObject(this.mainData[i])==true) {
                this.sortedData.push(i);
            }
        }
        var ptr = this;
        this.sortedData.sort(function (a,b) {
            var item_a = ptr.mainData[a];
            var item_b = ptr.mainData[b];
            var value_a = ptr.sortFieldForObject(item_a);
            var value_b = ptr.sortFieldForObject(item_b);
            if (typeof(value_a)==='string') {
                return value_a.localeCompare(value_b, {numeric: true});
            }
            return value_a - value_b;

        });



    },

    copy: function () {
        var ret = new MentatJS.DataSource();
        ret.arrayPath = this.arrayPath;
        ret.sortFieldForObject = this.sortFieldForObject;
        ret.initWithDataString(this.dataString);
        return ret;
    },

    deepCopy: function () {
        var ret = new MentatJS.DataSource();
        ret.arrayPath = this.arrayPath;
        ret.sortFieldForObject = this.sortFieldForObject;
        ret.filterForObject = this.filterForObject;
        ret.initWithDataString(this.dataString);
        ret.mainData = JSON.parse(JSON.stringify(this.mainData));
        ret.reindex();
        return ret;
    }


});

MentatJS.DownloadWorkerBlobFunction = function () {

    self.onmessage = function (event) {
        var xmlHttpReq = new XMLHttpRequest();
        console.log('uri is ' + event.data);
        xmlHttpReq.open("GET", event.data, false);
        xmlHttpReq.send(null);
        self.postMessage(xmlHttpReq.responseText);
    };

}

var code = MentatJS.DownloadWorkerBlobFunction.toString();
code = code.substring(code.indexOf("{")+1, code.lastIndexOf("}"));

MentatJS.DownloadWorkerBlob = new Blob( [code], { type: 'text/javascript'});
MentatJS.DownloadWorkerURI = window.URL.createObjectURL(MentatJS.DownloadWorkerBlob);




MentatJS.DownloadData = function (uri,callback,errorCallback) {

    if (!!window.Worker) {

        var worker = new Worker(MentatJS.DownloadWorkerURI);
        worker.onmessage = function (event) {
            callback(event.data);
        };
        worker.onerror = function (event) {
            var o = event.message;
            errorCallback(event);
        };

        worker.postMessage(uri);

    } else {
        var xmlHttpReq = createXMLHttpRequest();
        xmlHttpReq.open("GET", uri, false);
        xmlHttpReq.send(null);
        callback(xmlHttpReq.responseText);

    }

};


MentatJS.PostDataWithDelegate = function (dataID, uri, postData, delegate) {

    var json = JSON.stringify(postData);



    if (!!window.Worker) {
        var worker = new Worker("FrameworkUI/dev/Workers/Post.js");
        worker.onmessage = function (event) {
            delegate.dataWasPosted(dataID,event.data);
        };
        worker.onerror = function (event) {
            var o = event.message;
            delegate.couldNotPostData(dataID,event);
        };
        var obj = {};
        obj.uri = uri;
        obj.postData = json;
        worker.postMessage(obj);
    } else {
        var xmlHttpReq = createXMLHttpRequest();
        xmlHttpReq.open("POST", uri, true);
        xmlHttpReq.setRequestHeader("Content-type", "application/json");
        //xmlHttpReq.setRequestHeader("Content-length", json.length);
        xmlHttpReq.send(json);
        delegate.dataWasPosted(dataID,xmlHttpReq.responseText);
    }

};


MentatJS.DownloadDataWithDelegate = function (dataID, uri, delegate) {

    if (!!window.Worker) {

        var worker = new Worker(MentatJS.DownloadWorkerURI);
        worker.onmessage = function (event) {
            delegate.dataWasDownloaded(dataID,event.data);
        };
        worker.onerror = function (event) {
            var o = event.message;
            delegate.couldNotDownload(dataID,event);
        };
        worker.postMessage(uri);

    } else {
        var xmlHttpReq = createXMLHttpRequest();
        xmlHttpReq.open("GET", uri, false);
        xmlHttpReq.send(null);
        delegate.dataWasDownloaded(dataID,xmlHttpReq.responseText);

    }

};


MentatJS.PutDataWithDelegate = function (dataID, uri, putData, delegate) {
    if (!!window.Worker) {

        var worker = new Worker("FrameworkUI/dev/Workers/Put.js");
        worker.onmessage = function (event) {
            delegate['dataWasPut'](dataID,event.data);
        };
        worker.onerror = function (event) {
            var o = event.message;
            delegate['couldNotPut'](dataID,event);
        };
        var obj = {};
        obj.uri = uri;
        obj.putData = putData;
        worker.postMessage(obj);

    } else {
        var xmlHttpReq = createXMLHttpRequest();
        xmlHttpReq.open("PUT", uri, false);
        xmlHttpReq.send(null);
        delegate['dataWasPut'](dataID,xmlHttpReq.responseText);

    }
};


MentatJS.LoadScript = function (dataID, uri) {

    var tag = document.createElement("script");
    tag.src = uri;
    document.getElementsByTagName("head")[0].appendChild(tag);

};

MentatJS.declare = function (scriptID, fn) {

    fn();

    MentatJS.Application.instance.cache( scriptID, { fn: fn });


    for ( var i = 0; i < MentatJS.Application.instance.downloadStack.length; i++) {
        var stack = MentatJS.Application.instance.downloadStack[i];
        if (stack.counter>0) {
            if (stack.files.contains(scriptID)) {
                stack.counter--;
                if (stack.counter==0) {
                    stack.navigationController._initViewController(stack);
                }
            }
        }


    }


}


MentatJS.View = Class.extend({

    id : '',
    NO_RESIZE : false,
    actionDelegate : null,
    actionDelegateEventName : '',
    viewController : null,
    navigationController : null,

    bounds :  null,

    oldBounds :  {
        x: 0,
        y: 0,
        width: 100,
        height: 100,
        unit: 'px',
        position: 'absolute'
    },

    parentView :  null,
    subViews : null,

    _div : null,
    dragScroll: false,

    setActionDelegate : function (d,n) {
        this.actionDelegate = d;
        this.actionDelegateEventName = n;
        var ptr = this;
    },

    setEnabled : function (e) {
        if (this.onEnableStatusChanged!=null) {
            this.onEnableStatusChanged(e);
        }
    },

    getDiv : function () {
        return this._div;
    },

    setVisible : function (b) {
        var div = this.getDiv();
        if (div != undefined) {
            div.style.display = (b == true) ? 'block' : 'none';
        }
    },


    boundsForView : function (parentBounds,oldBounds) {
        return null;
    },


    viewWillLoad : function () {

    },

    viewDidLoad : function () {

    },

    viewWasAttached : function () {

    },

    setScrollView: function (horizEnabled,verticalEnabled) {
        "use strict";
        this.getDiv().style.overflowX = (horizEnabled===true) ? "scroll" : "hidden";
        this.getDiv().style.overflowY = (verticalEnabled===true) ? "scroll" : "hidden";
    },

    setLayerHeight : function (z) {
        this.getDiv().style.zIndex = z;
    },

    setOpacity : function (o) {
        this.getDiv().style.opacity = o;
    },

    doResize : function () {

        var parentBounds = null;
        if (this.parentView === null) {
            // get the parent node if possible
            var pnode = this.getDiv().parentNode;
            if (pnode === document.body) {
                parentBounds = {
                    x: 0,
                    y: 0,
                    width: document.documentElement.clientWidth,
                    height: document.documentElement.clientHeight,
                    unit: 'px',
                    position: 'absolute'
                };
            } else {
                var x = 0;
                var y = 0;
                var width = 0;
                var height = 0;

                if (pnode.style != undefined) {
                    if (pnode.style.left != undefined) {
                        x = pnode.style.left.substr(0, pnode.style.left.indexOf('px'));
                    }
                    if (pnode.style.top != undefined) {
                        y = pnode.style.top.substr(0, pnode.style.top.indexOf('px'));
                    }
                    if (pnode.style.width != undefined) {
                        width = pnode.style.width.substr(0, pnode.style.width.indexOf('px'));
                    }
                    if (pnode.style.height != undefined) {
                        height = pnode.style.height.substr(0, pnode.style.height.indexOf('px'));
                    }
                }

                parentBounds = {
                    x: x,
                    y: y,
                    width: width,
                    height: height,
                    unit: 'px',
                    position: 'absolute'
                };
            }

        } else {
            parentBounds = this.parentView.bounds;
        }

        if (this.boundsForView !== undefined) {
            if (parentBounds === null) {
                throw new Error('parentBounds of a view cannot be null');
            }
            var newBounds = this.boundsForView(parentBounds, this.bounds);
            if (newBounds !== null) {
                this.resize(newBounds);
                this.oldBounds = this.bounds;
                this.bounds = newBounds;
            }
        }

        if (this.subViews==null) this.subViews = new Array();

        for (var i = 0; i < this.subViews.length; i++) {
            this.subViews[i].doResize();
        }
    },




    resize : function (bounds) {

        if (this._div != undefined) {
            this._div.style.position = bounds.position;
            this._div.style.left = bounds.x + bounds.unit;
            this._div.style.top = bounds.y + bounds.unit;
            this._div.style.bottom = (bounds.y + bounds.height) + bounds.unit;
            this._div.style.right = (bounds.x + bounds.width) + bounds.unit;
            this._div.style.width = bounds.width + bounds.unit;
            this._div.style.height = bounds.height + bounds.unit;
        }
    },


    initFromLayout: function (_id,_el) {
        this.id = _id;
        this._div = _el;
        this._div.id = _id;
        this.subViews = new Array();
        if (this.viewWillLoad != undefined) {
            this.viewWillLoad();
        }

        if (this.controller!=null) {
            if (this.controller.viewWillLoad!=undefined) {
                this.controller.viewWillLoad(this);
            }
        }

        if (this.viewDidLoad != undefined) {
            this.viewDidLoad();
        }
        if (this.controller!=null) {
            if (this.controller.viewDidLoad!=undefined) {
                this.controller.viewDidLoad(this);
            }
        }

    },


    initView : function (_id,parentView) {
        // set the id
        this.id = _id;
        this._div = document.createElement('div');
        this._div.id = _id;
        this.subViews = new Array();
        if (parentView !== undefined) {
            this.parentView = parentView;
        }

        if (this.viewWillLoad != undefined) {
            this.viewWillLoad();
        }

        if (this.controller!=null) {
            if (this.controller.viewWillLoad!=undefined) {
                this.controller.viewWillLoad(this);
            }
        }

        if (this.viewDidLoad != undefined) {
            this.viewDidLoad();
        }
        if (this.controller!=null) {
            if (this.controller.viewDidLoad!=undefined) {
                this.controller.viewDidLoad(this);
            }
        }




    },




    attach : function (view) {
        if (this.subViews==null) this.subViews = new Array();
        this.subViews.push(view);
        if (this.getDiv() != undefined) {
            // is view.getDiv() already in this.getDiv() ?
            if (view.getDiv().parentNode == null) {
                this.getDiv().appendChild(view.getDiv());
            }
        }
        view.parentView = this;
        if (this.NO_RESIZE == false) {
            view.doResize();
        }
        if (view.viewWasAttached != null) {
            view.viewWasAttached(this);
        }
        view.getDiv().viewRef = view;


    },

    detachAllChildren : function () {
        if (this.subViews==null) this.subViews = new Array();
        if (this.getDiv() != undefined) {
            while ( this.getDiv().childNodes.length>0) {
                this.getDiv().removeChild(this.getDiv().children[this.getDiv().childNodes.length-1]);
            }

        }
    },




    flashColor : function(callback) {

        var ptr = this;
        var color = this.getDiv().style.color || '#000000';
        this.getDiv().style.color = '#A1C8FC';
        setTimeout( function() {
            ptr.getDiv().style.color = color;
            setTimeout( function() {
                ptr.getDiv().style.color = '#A1C7FC';
                setTimeout( function() {
                    ptr.getDiv().style.color = color;
                    setTimeout(function() {
                        callback();
                    },10);
                },50);
            },50);
        },50);
    },


    flash : function (callback) {

        var ptr = this;
        var backgroundColor = this.getDiv().style.backgroundColor || '#FFFFFF';
        this.getDiv().style.backgroundColor = '#A1C8FC';
        setTimeout( function() {
            ptr.getDiv().style.backgroundColor = backgroundColor;
            setTimeout( function() {
                ptr.getDiv().style.backgroundColor = '#A1C7FC';
                setTimeout( function() {
                    ptr.getDiv().style.backgroundColor = backgroundColor;
                    setTimeout(function() {
                        callback();
                    },10);
                },50);
            },50);

        },50);
    },


    flashTarget : function (target,callback) {
        var ptr2 = this;
        var backgroundColor = target.style.backgroundColor || '#FFFFFF';
        target.style.backgroundColor = '#A1C8FC';
        setTimeout( function() {
            target.style.backgroundColor = backgroundColor;
            setTimeout( function() {
                target.style.backgroundColor = '#A1C7FC';
                setTimeout( function() {
                    target.style.backgroundColor = backgroundColor;
                    setTimeout(function() {
                        callback(ptr2);
                    },10);
                },50);
            },50);

        },50);
    },

    fade2Black : function () {
        var ptr2 = this;
        this.getDiv().style.transition = 'opacity .75s ease-in-out';
        this.getDiv().style.opacity = 0.0;
        this.getDiv().style.backgroundColor = 'black';
    },

    fadeOut : function () {
        this.getDiv().style.transition = 'opacity .75s ease-in-out';
        this.getDiv().style.opacity = 1.0;
        this.getDiv().style.backgroundColor = 'white';
    },



    findViewNamed : function (name) {
        if (this.id == name)
            return this;
        for (var i = 0; i < this.subViews.length; i++) {
            var ret = this.subViews[i].findViewNamed(name);
            if (ret!=null) return ret;
        }
        return null;
    },


    detach : function (name) {
        console.log('detaching '+name+' from ' + this.id);
        var idx = -1;
        for (var i = 0; i < this.subViews.length; i++) {
            if (this.subViews[i].id==name) {
                idx = i;
            }
        }
        console.log('index is ' + idx);
        console.dir(this.subViews);
        if (idx>-1) {
            if (this.subViews[idx].getDiv()!=null) {
                if (this.getDiv()!=null) {
                    this.getDiv().removeChild( this.subViews[idx].getDiv());
                }
            }
            this.subViews[idx].parent = null;
            if (this.subViews[idx].viewWasDetached!=null) {
                this.subViews[idx].viewWasDetached();
            }
            var view = this.subViews[idx];
            this.subViews.splice(idx,1);
        }
        console.dir(this.subViews);
        console.log('end detach');
    },

    detachItSelf : function () {
        if (this.parent!=null) {
            this.parent.detach(this.id);
        } else {
            this.getDiv().parentNode.removeChild(this.getDiv());
        }
    },



    loadLayoutWithDelegate : function (layoutFile, delegate) {

        var thisView = this;

        // is the layout in cache ?
        if (MentatJS.Application.instance!=null) {
            var cache = MentatJS.Application.instance.cacheContains(layoutFile);
            if (cache!=null) {
                thisView.getDiv().innerHTML = cache.layout;
                delegate.layoutWasLoadedSuccessfully(thisView, cache.layout);
                return;
            }
        }
        
        
        if (!!window.Worker) {

            var worker = new Worker(MentatJS.DownloadWorkerURI);
            worker.onmessage = function (event) {
                thisView.getDiv().innerHTML = event.data;
                MentatJS.Application.instance.cache( layoutFile, { layout: event.data });
                delegate.layoutWasLoadedSuccessfully(thisView,event.data);
            };
            worker.onerror = function (event) {
                var o = event.message;
                delegate.couldNotLoadLayout(thisView,event);
            };
            worker.postMessage(layoutFile);

        } else {
            var xmlHttpReq = createXMLHttpRequest();
            xmlHttpReq.open("GET", uri, false);
            xmlHttpReq.send(null);
            thisView.getDiv().innerHTML = xmlHttpReq.responseText;
            MentatJS.Application.instance.cache( layoutFile, { layout: xmlHttpReq.responseText });
            delegate.layoutWasLoadedSuccessfully(thisView,xmlHttpReq.responseText);

        }

    },


    scrollCallback : function (event) {
        "use strict";
        this.getDiv().style.left = (MentatJS._offsetX + event.clientX - MentatJS._startX) + 'px';
        this.getDiv().style.top = (MentatJS._offsetY + event.clientY - MentatJS._startY) + 'px';
    },


    isDragScroll: function () {
        "use strict";
        if (this.dragScroll===true) {
            return this;
        }
        if (this.parentView!==null) {
            return this.parentView.isDragScroll();
        }
        return null;
    }



});


MentatJS.onMouseDown = function (e) {
    console.log('onMouseDown');

    if (e.srcElement!==undefined) {
        if (e.srcElement.viewRef!==undefined) {
            console.log(e.srcElement.viewRef.id);
        }
    }



    document.onmousemove = MentatJS.onMouseMove;
    document.ontouchmove = MentatJS.onMouseMove;
    MentatJS._startX = event.clientX;
    MentatJS._startY = event.clientY;
    MentatJS._offsetX = MentatJS._dragElement.offsetLeft;
    MentatJS._offsetY = MentatJS._dragElement.offsetTop;

    //e.preventDefault();

};

MentatJS.onMouseMove = function (e) {
    "use strict";
    if (e == null)
        var e = window.event;

    // this is the actual "drag code"
    //MentatJS._dragElement.style.left = (MentatJS._offsetX + e.clientX - MentatJS._startX) + 'px';
    //MentatJS._dragElement.style.top = (MentatJS._offsetY + e.clientY - MentatJS._startY) + 'px';

    if (MentatJS._dragElement.viewRef!==undefined) {
        MentatJS._dragElement.viewRef.scrollCallback(e);

    }

};


MentatJS.onMouseUp = function () {
    "use strict";
    document.onmousemove = null;
    document.ontouchmove = null;
}



MentatJS.fillParentBounds = function (parentBounds) {
    "use strict";
    return {
        x: 0,
        y: 0,
        width: parentBounds.width,
        height: parentBounds.height,
        unit: parentBounds.unit,
        position: parentBounds.position
    };
};


MentatJS.applyClickThrough = function (cell) {

    cell.getDiv().style.pointerEvents = 'none';
    /*
    addEventListener(cell.getDiv(), 'click', function () {
        ptr[fnName]
    });
    addEventListener(cell.getDiv(), 'mouseover', function (e) {
        this.style.cursor = 'pointer';
    });
    */

    for ( var i = 0; i < cell.subViews.length; i++ ) {
        MentatJS.applyClickThrough( cell.subViews[i]);
    }
};






MentatJS.ViewController = Class.extend({

    id : '',
    view : null,
    navigationController : null,

    initViewController : function (_id) {
        this.id = _id;
        this.view = this.viewForViewController();
        this.view.viewController = this;
        this.view.navigationController = this.navigationController;
        this.view.initView(this.id + ".view");
    },

    viewControllerDidLoad : function () {

    },

    viewControllerWillBeDestroyed : function () {

    },


    viewForViewController : function  () {
        var v = new MentatJS.View();
        v.boundsForView = function (parentBounds,oldBounds) {
            return parentBounds;
        };
        return v;
    },


    viewWillBePresented : function (parentBounds) {

    },


    viewWasPresented : function() {

    }


});MentatJS.NavigationController = Class.extend({

    id :  'UINavigationController.instance',
    rootView :  null,
    viewControllers : [],



    initNavigationControllerWithRootView : function (_id,_rootView) {
        this.id = _id;
        this.rootView = _rootView;
        this.viewControllers = new Array();
    },


    loadViewController : function ( vcOpts, arrayOfFilesToDownload, delegate ) {

        var downloadStack = {
            vcClass: vcOpts.class,
            vcID: vcOpts.id,
            counter: arrayOfFilesToDownload.length,
            files: [],
            navigationController: this,
            delegate: delegate
        }
        var stackIndex = MentatJS.Application.instance.downloadStack.push(downloadStack);

        for ( var i = 0; i < arrayOfFilesToDownload.length; i++ ) {
            
            var downloadID = arrayOfFilesToDownload[i].id;

            if (!MentatJS.Application.instance.cacheContains(downloadID)) {

                downloadStack.files.push(downloadID);

                MentatJS.LoadScript(downloadID, arrayOfFilesToDownload[i].uri);

            } else {
                downloadStack.counter--;
            }
        }
        if (downloadStack.counter==0) {
            this._initViewController(downloadStack);
        }
    },


    _initViewController : function (stack) {
        var newVC = null;
        eval('newVC = new ' + stack.vcClass + "();");
        if (newVC==null) {
            throw new Error('could not instantiate VC ' + stack.vcClass);
            return;
        } else {
            console.log('+VC: ' + stack.vcID);
        }
        newVC.navigationController = this;
        newVC.initViewController(stack.vcID);
        this.viewControllers.push(newVC);
        stack.delegate.viewControllerWasLoadedSuccessfully (newVC);
        stack = { vcClass: '', vcID: '', counter: 0, files:[], delegate: null};
    },


    removeViewController : function (vcToRemove) {
        console.log('-VC '+ vcToRemove.id);

        if (vcToRemove.view!=null) {
            if (this.rootView!=null) {
                
                this.rootView.detach(vcToRemove.view.id);
            }
        }
        if (vcToRemove.viewControllerWillBeDestroyed!=undefined) {
            vcToRemove.viewControllerWillBeDestroyed();
        }
        for ( var i = 0; i < this.viewControllers.length; i++) {
            if (this.viewControllers[i] == vcToRemove) {
                this.viewControllers.splice(i,1);
                i = 0;
            }
        }
    },

    clear: function () {

        while (this.viewControllers.length>0) {
            var vc = this.viewControllers[this.viewControllers.length-1];
            this.removeViewController(vc);
        }

    },



    present : function ( vc, options) {

        var opts = {
            animated: options.animated | false,
            direction: options.direction || 'left',
            duration: options.duration | 1300
        }
        // let the view prepare for the right bounds

        vc.viewWillBePresented(this.rootView.bounds);

        vc.view.bounds = vc.view.boundsForView(this.rootView.bounds,null);

        this.rootView.attach(vc.view);

        if (vc.viewWasAttached!=undefined) {
            vc.viewWasAttached();
        }

        if (opts.animated == false) {
            for (var i = 0; i < this.viewControllers.length; i++) {
                if (this.viewControllers[i] != vc) {
                    var vcToRemove = this.viewControllers[i];
                    this.removeViewController(vcToRemove);
                    i = 0;
                }
            }
            vc.viewWasPresented();
            return;
        }
        // ok we animate
        // from which direction is the new view coming ?

        this.animation = new MentatJS.Animation();
        this.animation.initWithDelegate(vc.id,this);

        for (var i = 0; i < this.viewControllers.length; i++) {
            var isNewView = false;
            var aview = null;

            if (this.viewControllers[i].id == vc.id) {
                isNewView = true;
                aview = vc.view;
            } else {
                aview = this.viewControllers[i].view;
            }

            var animKey = new MentatJS.ViewAnimationKey();
            animKey.view = aview;
            animKey.easingFunction = MentatJS.Easing.easeOutCirc;
            animKey.duration = 500;
            switch (opts.direction) {
                case 'left':
                    animKey.transform = 'translateX';
                    if (isNewView) {
                        animKey.startValue = this.rootView.bounds.width;
                        animKey.endValue = 0;
                    } else {
                        animKey.startValue = 0;
                        animKey.endValue = -this.rootView.bounds.width;
                    }
                    animKey.direction = -1;
                    break;
                case 'right':
                    animKey.transform = 'translateX';
                    if (isNewView) {
                        animKey.startValue = -this.rootView.bounds.width;
                        animKey.endValue = 0;
                    } else {
                        animKey.startValue = 0;
                        animKey.endValue = this.rootView.bounds.width;
                    }
                    animKey.direction = +1;
                    break;
                case 'up':
                    animKey.transform = 'translateY';
                    if (isNewView) {
                        animKey.startValue = this.rootView.bounds.height;
                        animKey.endValue = 0;
                    } else {
                        animKey.startValue = 0;
                        animKey.endValue = -this.rootView.bounds.height;
                    }
                    animKey.direction = -1;
                    break;
                case 'down':
                    animKey.transform = 'translateY';
                    if (isNewView) {
                        animKey.startValue = -this.rootView.bounds.height;
                        animKey.endValue = 0;
                    } else {
                        animKey.startValue = 0;
                        animKey.endValue = this.rootView.bounds.height;
                    }
                    animKey.direction = +1;
                    break;
            }
            animKey.drawFrame(0.000);
            this.animation.pushAnimationKey(animKey);
        }
        this.animation.startPlaying();
    },


    animationDidFinish : function (id) {
        this.animation = null;
        var vc = null;
        var i = 0;
        while (i<this.viewControllers.length) {

            if (this.viewControllers[i].id == id) {
                vc = this.viewControllers[i];
            } else {
                var vcToRemove = this.viewControllers[i];
                this.removeViewController(vcToRemove);
                i = -1;
            }
            i++;
        }
        if (vc!=null) {
            vc.viewWasPresented();
        }
    }



});
MentatJS.Easing = {
    easeLinear: function (x,t,b,c,d) {
        t/=d;
        return b+c*(t);
    },
    easeInQuad: function (x, t, b, c, d) {
        return c*(t/=d)*t + b;
    },
    easeOutQuad: function (x, t, b, c, d) {
        return -c *(t/=d)*(t-2) + b;
    },
    easeInOutQuad: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t + b;
        return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    easeInCubic: function (x, t, b, c, d) {
        return c*(t/=d)*t*t + b;
    },
    easeOutCubic: function (x, t, b, c, d) {
        return c*((t=t/d-1)*t*t + 1) + b;
    },
    easeInOutCubic: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t + b;
        return c/2*((t-=2)*t*t + 2) + b;
    },
    easeInQuart: function (x, t, b, c, d) {
        return c*(t/=d)*t*t*t + b;
    },
    easeOutQuart: function (x, t, b, c, d) {
        return -c * ((t=t/d-1)*t*t*t - 1) + b;
    },
    easeInOutQuart: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
        return -c/2 * ((t-=2)*t*t*t - 2) + b;
    },
    easeInQuint: function (x, t, b, c, d) {
        return c*(t/=d)*t*t*t*t + b;
    },
    easeOutQuint: function (x, t, b, c, d) {
        return c*((t=t/d-1)*t*t*t*t + 1) + b;
    },
    easeInOutQuint: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
        return c/2*((t-=2)*t*t*t*t + 2) + b;
    },
    easeInSine: function (x, t, b, c, d) {
        return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
    },
    easeOutSine: function (x, t, b, c, d) {
        return c * Math.sin(t/d * (Math.PI/2)) + b;
    },
    easeInOutSine: function (x, t, b, c, d) {
        return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
    },
    easeInExpo: function (x, t, b, c, d) {
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
        if (t==0) return b;
        if (t==d) return b+c;
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (x, t, b, c, d) {
        return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
    },
    easeOutCirc: function (x, t, b, c, d) {
        return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
    },
    easeInOutCirc: function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
        return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    },
    easeInElastic: function (x, t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    },
    easeOutElastic: function (x, t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    },
    easeInOutElastic: function (x, t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
    },
    easeInBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*(t/=d)*t*((s+1)*t - s) + b;
    },
    easeOutBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    },
    easeInOutBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    },
    easeInBounce: function (x, t, b, c, d) {
        return c - FrameworkUI.Easing.easeOutBounce (x, d-t, 0, c, d) + b;
    },
    easeOutBounce: function (x, t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
            return c*(7.5625*t*t) + b;
        } else if (t < (2/2.75)) {
            return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
        } else if (t < (2.5/2.75)) {
            return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
        } else {
            return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
        }
    },
    easeInOutBounce: function (x, t, b, c, d) {
        if (t < d/2) return FrameworkUI.Easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
        return FrameworkUI.Easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
    }


};


MentatJS.ViewAnimationKey = Class.extend({
    view : null,
    easingFunction : MentatJS.Easing.easeLinear,
    duration : 300,
    transform : 'translateX',
    startValue : 0,
    endValue : 0,
    direction : 1,
    offset : 0,

    executeOnStart : function  () {

    },

    drawFrame : function (x) {
        var newposition = this.startValue + this.direction * ((this.endValue - this.startValue) * x);
        if (this.startValue>this.endValue) {
            newposition = this.startValue + this.direction * ((this.startValue - this.endValue) * x);
        }
        var newTransform = this.transform + "(" + newposition + "px)";
        this.view.getDiv().style.transform = newTransform;
    }


});




MentatJS.Animation = Class.extend({
    id : '',
    keys : null,
    activeKeys : null,
    delegate : null,

    initWithDelegate : function (_id, _delegate) {
        this.id = _id;
        this.delegate = _delegate;
        this.keys = new Array();
        this.activeKeys = new Array();
    },


    pushAnimationKey : function (viewAnimation) {
        if (this.keys['key' + viewAnimation.offset] == undefined) {
            this.keys['key' + viewAnimation.offset] = [];
        }
        this.keys['key' + viewAnimation.offset].push(viewAnimation);
    },

    startPlaying : function () {

        this.activeKeys = [];
        this.stopping = false;
        this.milliKey = -1;

        this.fps = 60;
        this.fpsInterval = 0;
        this.startTime = window.performance.now();
        this.now = 0;
        this.then = 0;
        this.elapsed = 0;

        this.fpsInterval = 1000 / this.fps;
        this.then = window.performance.now();
        this.startTime = this.then;

        this.totalElapsed = 0;

        if (this.keys['key0']!=undefined) {
            if (this.keys['key0'].length>0) {
                for ( var  i = 0; i < this.keys['key0'].length; i++) {
                    this.activeKeys.push(this.keys['key0'][i]);
                }
            }
        }
        this.endOfAnimation = -1;


        for (var x in this.keys) {

            if (this.keys[x]!=undefined) {
                // is it an array ?
                if (Array.isArray(this.keys[x])) {
                    for (var i = 0; i < this.keys[x].length; i++) {
                        if (this.keys[x][i] == undefined) {
                            console.log('error key is broken');
                            console.dir(this.keys[x][i]);
                        }
                        if (this.keys[x][i].offset + this.keys[x][i].duration > this.endOfAnimation) {
                            this.endOfAnimation = this.keys[x][i].offset + this.keys[x][i].duration;
                        }
                    }
                }
            }


        }

        this.animate();
    },


    animate : function () {
        var ptr = this;
        this.now = window.performance.now();
        this.elapsed = this.now - this.then;
        this.totalElapsed = Math.floor(this.now - this.startTime);
        if (this.totalElapsed>10500) {
            if (this.delegate!=null) {
                if (this.delegate.animationDidFinish!=undefined) {
                    this.delegate.animationDidFinish(this.id);
                }
            }
        }

        if (this.elapsed > this.fpsInterval) {
            this.then = this.now - (this.elapsed % this.fpsInterval);
            this.drawFrame();
        }

        if (this.totalElapsed > this.endOfAnimation) {

            if (this.delegate!=null) {
                if (this.delegate.animationDidFinish!=undefined) {
                    this.delegate.animationDidFinish(this.id);
                }
            }
            return;
        }
        requestAnimationFrame(function () {
            ptr.animate();
        });
    },

    drawFrame : function () {
        for ( var i = 0; i < this.activeKeys.length; i++) {
            var k = this.activeKeys[i];
            var expectedEnd = Math.floor(this.startTime + k.offset + k.duration );
            var t = window.performance.now() - this.startTime + k.offset;
            var x = this.totalElapsed/expectedEnd;
            var d = k.duration;
            var b = 0;
            var c = 1;
            var value = k.easingFunction(x,t,b,c,d);

            k.drawFrame(value);

            if (t>d) {
                k.drawFrame(1.000);
                this.activeKeys.splice(i,1);
                i = 0;
            }
        }

    }
    
});




MentatJS.CollectionView = MentatJS.View.extend({

    dataSource: null,


    Items: null,
    singleSelection: false,
    noSelection: false,
    direction: 'vertical',

    cell_default_width: function (index) { return 64; },
    cell_default_height: function (index) { return 64; },

    reloadData: function () {
        this.subViews = new Array();
        this.Items = new Array();
        while (this.getDiv().hasChildNodes()) {
            this.getDiv().removeChild(this.getDiv().firstChild);
        }

        if (this.dataSource === null) {
            return;
        }

        // how many items do we have to show?
        var count = this.dataSource.numberOfItems();

        var currentRow = 0;
        var currentCol = 0;

        for (var idx = 0; idx < count; idx++) {
            // default width of cell
            var width = this.cell_default_width(idx);
            var height = this.cell_default_height(idx);

            itemObj = { index: idx, Selected: false};
            this.Items.push(itemObj);

            var cell = new MentatJS.View();
            cell.idx = idx;
            cell.currentRow = currentRow;
            cell.currentCol = currentCol;
            cell.cell_width = width;
            cell.cell_height = height;
            cell.itemObj = itemObj;
            cell.boundsForView = function (parentBounds, oldBounds) {
                let x = this.currentCol*this.cell_width;
                let y = this.currentRow*this.cell_height;
                let width = this.cell_width;
                let height = this.cell_height;
                return {
                    x: x,
                    y: y,
                    width: width,
                    height: height,
                    unit: 'px',
                    position: 'absolute'
                };
            };

            cell.initView(this.id + ".cell" + idx);
            this.attach(cell);
            cell.getDiv().collectionPtr = this;
            cell.getDiv().item_index = idx;
            cell.getDiv().addEventListener('click',function (e) {

                this.collectionPtr.onItemClick(e.ctrlKey, e.shiftKey, this.id, this.item_index);
            });
            this.cellWasAdded(cell,cell.idx,cell.itemObj);

            if (this.direction === 'vertical') {
                currentCol += 1;
                if ((currentCol)*width+width >= this.bounds.width) {
                    currentRow++;
                    currentCol = 0;
                }
            } else if (this.direction=='horizontal') {
                currentRow+= 1;
                if ((currentRow)*height+height >= this.bounds.height) {
                    currentCol++;
                    currentRow = 0;
                }
            }

        }



    },


    objectSelectionChanged: function (index,selected) {
        console.log('uicollectionview objectSelectionChanged');
    },

    onItemClick: function (ctrlKey,shiftKey,cellID, cellIndex) {

        var color = '';

        //var arr = window.top.$.grep(this.Items, function (o) { return ((o.section == section_index) && (o.index == item_index)); });

        if (this.noSelection) return;

        var arr = null;


        for ( var i = 0; i < this.Items.length; i++) {
            if ((this.Items[i].index == cellIndex)) {
                arr = [this.Items[i]];
            }
        }


        var selected = false;

        if (this.singleSelection==false) {
            ctrl = true;
            shift = false;
        } else {
            ctrl = false;
            shift = false;
        }

        if ((ctrl == true) && (shift == false)) {
            // ADD A ROW TO THE SELECTION
            //color = window.top.$(document.getElementById(rowID)).css("background-color");
            color = document.getElementById(cellID).style.backgroundColor;
            if (color == "rgb(173, 216, 230)") {
                //window.top.$(document.getElementById(rowID)).css({ "background-color": "transparent" });
                document.getElementById(cellID).style.backgroundColor = 'transparent';
                if (arr.length > 0) {
                    arr[0].Selected = false;
                    selected = false;
                }
            } else {
                //window.top.$(document.getElementById(rowID)).css({ "background-color": "rgb(173, 216, 230)" });
                document.getElementById(cellID).style.backgroundColor = 'rgb(173,216,230)';
                if (arr.length > 0) {
                    arr[0].Selected = true;
                    selected = true;
                }
            }
            this.objectSelectionChanged(cellIndex, selected);
        }
        else if ((ctrl == false) && (shift == false)) {
            // REMOVE SELECTION AND SELECT THIS ROW
            for (var i = 0; i < this.Items.length; i++) {
                if ((this.Items[i].index == cellIndex)) continue;
                //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "transparent" });
                document.getElementById(this.id + "_cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                this.Items[i].Selected = false;
                this.objectSelectionChanged(this.Items[i].index, this.Items[i].Selected);
            }
            //color = window.top.$(document.getElementById(rowID)).css("background-color");
            color = document.getElementById(cellID).style.backgroundColor;

            if (color == "rgb(173, 216, 230)") {
                //$(document.getElementById(rowID)).css({ "background-color": "transparent" });
                document.getElementById(cellID).style.backgroundColor = 'transparent';
                if (arr.length > 0) {
                    arr[0].Selected = false;
                    selected = false;
                }
            } else {
                //$(document.getElementById(rowID)).css({ "background-color": "rgb(173, 216, 230)" });
                document.getElementById(cellID).style.backgroundColor = 'rgb(173, 216, 230)';

                if (arr.length > 0) {
                    arr[0].Selected = true;
                    selected = true;
                }
            }
            this.objectSelectionChanged(cellIndex, selected);

        }
        else if ((ctrl == false) && (shift == true)) {
            // RANGE SELECTION
            var index = -1;
            var reverse = false;
            for (var i = 0; i < this.Items.length; i++) {
                if (index == -1) {
                    if (this.Items[i].Selected == true) {
                        index = i;

                        if (this.Items[i].index > cellIndex) {
                            reverse = true;
                            break;
                        }

                    }
                }
                if ((i >= index) && (index > -1)) {

                    //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "rgb(173, 216, 230)" });
                    document.getElementById(this.id + "_cell" + this.Items[i].index).style.backgroundColor = 'rgb(173, 216, 230)';
                    this.Items[i].Selected = true;
                    this.objectSelectionChanged(this.Items[i].index, this.Items[i].Selected);

                    if ((this.Items[i].index == cellIndex)) {
                        // remove the ones after
                        index = -2;
                    }
                } else
                if (index == -2) {
                    //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "transparent" });
                    document.getElementById(this.id + "_cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                    this.Items[i].Selected = false;
                    this.objectSelectionChanged(this.Items[i].index, this.Items[i].Selected);
                }
            }

            if (reverse == true) {

                for (var i = index; i >= 0; i--) {

                    //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "rgb(173, 216, 230)" });
                    document.getElementById(this.id + "_cell" + this.Items[i].index).style.backgroundColor = 'rgb(173, 216, 230)';
                    this.Items[i].Selected = true;
                    this.objectSelectionChanged(this.Items[i].index, this.Items[i].Selected);

                    if ((this.Items[i].index == cellIndex)) {
                        index = -2;
                    }
                    else if (index == -2) {
                        //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "transparent" });
                        document.getElementById(this.id + "_cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                        this.Items[i].Selected = false;
                        this.objectSelectionChanged(this.Items[i].index, this.Items[i].Selected);
                    }
                }

            }
        }

        // call the action delegate
        if (this.actionDelegate !== null) {
            this.actionDelegate[this.actionDelegateEventName](this)
        }


    },

    GetSelectedObjects : function () {
        var arr = [];
        for ( var i = 0 ; i < this.Items.length; i++) {
            if (this.Items[i].Selected==true) {
                arr.push(this.Items[i]);
            }
        }
        var ret = new Array();
        for (var i = 0; i < arr.length; i++) {

            var obj = this.dataSource.objectForSortedIndex(arr[i].index);
            ret.push(obj);
        }
        return ret;
    },





    cellWasAdded: function (cell,index,item) {

    },

    initView: function (_id) {
        // set the id
        this.id = _id;
        this._div = document.createElement('div');
        this._div.id = _id;
        this.subViews = new Array();
        if (this.viewWillLoad != undefined) {
            this.viewWillLoad();
        }


        // WHY ?
        if (this.controller!=null) {
            if (this.controller.viewWillLoad!=undefined) {
                this.controller.viewWillLoad(this);
            }
        }

        this.reloadData();




        if (this.viewDidLoad != undefined) {
            this.viewDidLoad();
        }
        if (this.controller!=null) {
            if (this.controller.viewDidLoad!=undefined) {
                this.controller.viewDidLoad(this);
            }
        }

    }





});

MentatJS.tints = {};

MentatJS.tints.kCyanTint = { background: 'rgb(34,204,202)', text: 'rgb(255,255,255)', normal: 'rgb(34,204,202)', hover: 'rgb(62,231,230)', hovertext: 'rgb(255,255,255)', toggled: 'rgb(29,179,179)', toggledtext: 'rgb(255,255,255)' };
MentatJS.tints.kLightBlueTint = { background: 'rgb(119,211,230)', text: 'rgb(255,255,255)', normal: 'rgb(119,211,230)', hover: 'rgb(132,234,254)', hovertext: 'rgb(255,255,255)', toggled: 'rgb(106,188,204)', toggledtext: 'rgb(255,255,255)' };
MentatJS.tints.kOrangeTint = { background: 'rgb(253,128,106)', text: 'rgb(255,255,255)', normal: 'rgb(253,128,106)', hover: 'rgb(254,172,156)', hovertext: 'rgb(255,255,255)', toggled: 'rgb(229,117,96)', toggledtext: 'rgb(255,255,255)' };
MentatJS.tints.kBlueTint = { background: 'rgb(255,255,255)', text: 'rgb(50,192,247)', normal: 'rgb(50,192,247)', hover: 'rgb(50,192,247)', hovertext:'rgb(255,255,255)', toggled: 'rgb(50,192,247)', toggledtext: 'rgb(255,255,255)'};
MentatJS.tints.kRedTint = { background: 'rgb(255,255,255)', text: 'rgb(218,68,83)', normal: 'rgb(218,68,83)', hover: 'rgb(218,68,83)', hovertext:'rgb(255,255,255)', toggled:'rgb(218,68,83)', toggledtext: 'rgb(255,255,255)'};
MentatJS.tints.kGreenTint = { background: 'rgb(255,255,255)', text: 'rgb(50,192,50)', normal: 'rgb(30,222,30)', hover: 'rgb(50,192,247)', hovertext:'rgb(255,255,255)', toggled: 'rgb(50,192,247)', toggledtext: 'rgb(255,255,255)'};
MentatJS.tints.kWhiteTransparentTint = { background: 'transparent', text:'rgb(255,255,255)', normal:'rgb(255,255,255)', hover: 'rgb(255,255,255)', hovertext:'rgb(0,0,0)', toggled: 'rgb(255,255,255)', toggledtext: 'rgb(0,0,0)'};
MentatJS.tints.kDisabledTint = { background: 'rgb(248,248,248)', text:'rgb(215,215,215)', normal:'rgb(231,231,231)', hover: 'rgb(248,248,248)', hovertext:'rgb(215,215,215)', toggled:'rgb(128,128,128)', toggledtext: 'rgb(255,255,255)'};
MentatJS.tints.kDarkTint = { background: 'rgb(67,74,84)', text: 'rgb(255,255,255)', normal:'rgb(67,74,84)', hover: 'rgb(77,84,94)', hovertext:'rgb(255,255,255)', toggled: 'rgb(0,0,0)', toggledtext: 'rgb(255,255,255)'};



MentatJS.defaults.labelDefaultFont = 'brandon-grotesque';

MentatJS.Label = MentatJS.View.extend({

    text : '',
    fontFamily : MentatJS.defaults.labelDefaultFont,
    fontSize : 12,
    fontSizeUnit : 'px',
    fontColor : 'Black',
    textAlignment : 'left',
    fontWeight : '100',
    fillLineHeight: false,

    viewWasAttached : function () {
        this.refresh();
    },

    refresh : function () {
        this.getDiv().innerHTML = '<span style="color:'+this.fontColor+';font-family:'+this.fontFamily+';font-weight:'+this.fontWeight+';font-size:'+this.fontSize+this.fontSizeUnit+';">'+this.text+'</span>';
        this.getDiv().style.textAlign = this.textAlignment;
        this.getDiv().style.lineHeight = (this.fontSize-2)  + 'px'; 
        this.getDiv().uilabelRef = this;
        this.getDiv().onclick = function (e) {
            this.uilabelRef.onLabelClicked(this,e);
        };
        if (this.fillLineHeight === true) {

            if (this.bounds!==null) {
                this.getDiv().style.lineHeight = this.bounds.height + this.bounds.unit;
            }
        }
    },

    onLabelClicked : function (sender, param) {
        if (this.actionDelegate!=null) {
            this.actionDelegate[this.actionDelegateEventName](sender,param);
        }
    },

    setText : function (text) {
        this.text = text;
        this.refresh();
    },


    setFontColor : function (newColor) {
        this.fontColor = newColor;
        this.refresh();
    }


});


MentatJS.Label.labelFromLayout = function (parentView, elem_id, id) {
    var ret = new MentatJS.Label();
    var el = parentView.getDiv().querySelector("#" + elem_id);
    ret.NO_RESIZE = true;
    ret.initFromLayout(id,el);
    parentView.attach(ret);
    return ret;
}



MentatJS.defaults.buttonDefaultTint = MentatJS.tints.kBlueTint;


MentatJS.Button = MentatJS.View.extend({

    text : '',
    buttonElem : null,
    action : null,
    isToggle : false,
    isEnabled : true,
    isToggled : false,
    innerText : '',
    tint : MentatJS.defaults.buttonDefaultTint,
    oldTint : MentatJS.defaults.buttonDefaultTint,

    initView : function (id) {
        this.id = id;
        this._div = document.createElement('div');

        this._div.id = id;
        this._div.style.userSelect = 'none';
        this._div.style.MozUserSelect = 'none';
        this._div.style.webkitUserSelect = 'none';

        if (this._div != null) {

            this._div.style.webkitAppearance = 'none';
            this._div.style.background = this.tint.background;
            this._div.style.color = this.tint.text;
            this._div.style.border = '1px solid ' + this.tint.normal;
            this._div.style.borderRadius = '15px';
            this._div.style.height = '30px';
            this._div.style.fontWeight = 'normal';
            this._div.style.fontFamily = 'FontAwesome,robotoblack';
            this._div.value = this.text;
            this._div.innerHTML = this.text;

            this._div.className = 'fa';


            if (this.viewWillLoad != null)
                this.viewWillLoad();
            if (this.viewDidLoad != null)
                this.viewDidLoad();

            this.setToggled(this.isToggled);

        }

    },



    doResize : function () {
        if (this.viewWillResize != null) {
            throw Error('viewWillResize is not compatible.');
        };
        var parentBounds = (this.parentView!=null) ? this.parentView.bounds : null;
        if (this.boundsForView!=undefined) {
            var newBounds = this.boundsForView(parentBounds, this.bounds);
            if (newBounds!=null) {
                this.resize(newBounds);
                this.oldBounds = this.bounds;
                this.bounds = newBounds;
                this.getDiv().style.borderRadius = (this.bounds.height/2)  + this.bounds.unit;
            }
        }

        this._div.style.lineHeight = this.bounds.height + this.bounds.unit;
        this._div.style.textAlign = 'center';


        if (this.subViews==null) this.subViews = new Array();

        for (var i = 0; i < this.subViews.length; i++) {
            this.subViews[i].doResize();
        }
    },




    setText : function (_txt) {
        this.text = _txt;
        this._div.innerHTML = this.text;
    },

    setToggled : function (t) {
        if (t==true) {
            this.isToggled = true;
            this._div.style.background = this.tint.toggled;
            this._div.style.color = this.tint.toggledtext;
            this._div.style.border = '1px solid ' + this.tint.normal;
        } else {
            this.isToggled = false;
            this._div.style.background = this.tint.background;
            this._div.style.color = this.tint.text;
            this._div.style.border = '1px solid ' + this.tint.normal;
        }
    },


    onEnableStatusChanged : function (e) {
        if (e == false) {
            this.isEnabled=false;
            if ((this.isToggle) && (this.isToggled) ) {
                this._div.style.border = '1px solid ' + MentatJS.tints.kDisabledTint.normal; //'1px solid lightgrey';
                this._div.style.backgroundColor = MentatJS.tints.kDisabledTint.toggled;
                this._div.style.color = MentatJS.tints.kDisabledTint.toggledtext;
            } else {
                this._div.style.border = '1px solid ' + MentatJS.tints.kDisabledTint.normal; //'1px solid lightgrey';
                this._div.style.backgroundColor = MentatJS.tints.kDisabledTint.background;
                this._div.style.color = MentatJS.tints.kDisabledTint.text;
            }
            this.oldTint = this.tint;
            this.tint = MentatJS.tints.kDisabledTint;
            var ptr = this;
            this._div.removeEventListener('click',this.onClickEvent);
        } else {
            this.isEnabled = true;
            if ((this.isToggle) && (this.isToggled) ) {
                this._div.style.border = '1px solid ' + this.tint.normal; //'1px solid lightgrey';
                this._div.style.backgroundColor = this.tint.toggled;
                this._div.style.color = this.tint.toggledtext;
            } else {
                this._div.style.border = '1px solid ' + this.tint.normal; //'1px solid lightgrey';
                this._div.style.backgroundColor = this.tint.background;
                this._div.style.color = this.tint.text;
            }
            this.tint = this.oldTint;
            var ptr = this;
            this._div.addEventListener('click', this.onClickEvent);
        }
    },

    viewWasAttached : function () {

        var ptr = this;
        this.doResize();
        this.setToggled(this.isToggled);

        this.onClickEvent = function (sender) {
            var event_param = {
                button_id: this.id
            };
            MentatJS.Application.instance.session_event(MentatJS.kEvent_User,'Button.Click', event_param);
            ptr.flash(function() {
                if (ptr.isToggle) {
                    ptr.setToggled(!ptr.isToggled);
                }
                if (ptr.actionDelegate != null) {
                    ptr.actionDelegate[ptr.actionDelegateEventName](ptr,'onclick');
                }
            });
        };

        this._div.addEventListener('click', this.onClickEvent);
        this._div.addEventListener('mouseover', function (e) {
            this.style.cursor = 'pointer';
            if (ptr.isEnabled==true) {
                ptr.getDiv().style.backgroundColor = ptr.tint.hover;
                ptr.getDiv().style.color = ptr.tint.hovertext;
            } else {
                ptr.getDiv().style.backgroundColor = MentatJS.kDisabledTint.hover;
                ptr.getDiv().style.color = MentatJS.kDisabledTint.hovertext;
            }
        });
        this._div.addEventListener('mouseout', function (e) {
            this.style.cursor = '';
            if (ptr.isEnabled==true) {
                if ((ptr.isToggle) && (ptr.isToggled)) {
                    ptr.getDiv().style.backgroundColor = ptr.tint.hover;
                    ptr.getDiv().style.color = ptr.tint.hovertext;
                } else {
                    ptr.getDiv().style.backgroundColor = ptr.tint.background;
                    ptr.getDiv().style.color = ptr.tint.text;
                }
            } else {
                if ((ptr.isToggle) && (ptr.isToggled)) {
                    ptr.getDiv().style.backgroundColor = MentatJS.kDisabledTint.toggled;
                    ptr.getDiv().style.color = MentatJS.kDisabledTint.toggledtext;
                } else {
                    ptr.getDiv().style.backgroundColor = MentatJS.kDisabledTint.background;
                    ptr.getDiv().style.color = MentatJS.kDisabledTint.text;
                }
            }
        });
    },


    flash : function (callback) {

        var ptr = this;
        this.getDiv().style.backgroundColor = ptr.tint.hover; //'#A1C8FC';
        this.getDiv().style.color = ptr.tint.hovertext;
        setTimeout( function() {
            ptr.getDiv().style.backgroundColor = ptr.tint.background;
            ptr.getDiv().style.color = ptr.tint.text;
            setTimeout( function() {
                ptr.getDiv().style.backgroundColor = ptr.tint.hover; //'#A1C8FC';
                ptr.getDiv().style.color = ptr.tint.hovertext;
                setTimeout( function() {
                    ptr.getDiv().style.backgroundColor = ptr.tint.background;
                    ptr.getDiv().style.color = ptr.tint.text;
                    setTimeout(function() {
                        callback();
                    },10);
                },50);
            },50);

        },50);
    }



});

MentatJS.TextField = MentatJS.View.extend({

    icon : null,
    iconRight: null,
    textboxDiv : null,
    iconText: '',
    iconTextRight: '',
    isPassword : false,
    isTextArea: false,
    value : "",
    placeholderValue: "",
    timeoutHandle: null,

    leftIconClickDelegate: null,
    leftIconClickDelegateEventName: "",
    rightIconClickDelegate: null,
    rightIconClickDelegateEventName: "",

    setLeftIconClickDelegate : function (delegate,functionName) {
        this.leftIconClickDelegate = delegate;
        this.leftIconClickDelegateEventName = functionName;
    },
    setRightIconClickDelegate : function (delegate,functionName) {
        this.rightIconClickDelegate = delegate;
        this.rightIconClickDelegateEventName = functionName;
    },

    _leftIconClick: function (sender) {
        if (this.leftIconClickDelegate !== null) {
            this.leftIconClickDelegate[this.leftIconClickDelegateEventName](sender);
        }
    },
    _rightIconClick: function (sender) {
        if (this.rightIconClickDelegate !== null) {
            this.rightIconClickDelegate[this.rightIconClickDelegateEventName](sender);
        }
    },


    viewDidResize : function () {

    },
    textWasChanged : function (newValue) { },
    onTimeout: function () {
        clearTimeout(this.timeoutHandle);
        if (this.actionDelegate!=null) {
            this.actionDelegate[this.actionDelegateEventName](this,this.value);
        }
    },
    onTextChange : function () {
        this.value = this.textboxDiv.textbox.value;
        if (this.timeoutHandle!=null) {
            clearTimeout(this.timeoutHandle);
        }
        var ptr = this;
        this.timeoutHandle = setTimeout(function () { ptr.onTimeout(); }, 200);
        this.textWasChanged(this.value);
    },
    setText: function (value) {
        this.value = value;
        this.textboxDiv.textbox.value = value;
        this.textWasChanged(this.value);
    },

    setPlaceholder: function (value) {
        this.textboxDiv.textbox.placeholder = value;
    },

    viewWillLoad : function () {

        this.icon = new MentatJS.View();
        this.iconRight = new MentatJS.Label();
        this.textboxDiv = new MentatJS.View();
    },


    focus: function () {
        this.textboxDiv.textbox.focus();
        this.textboxDiv.textbox.select();
    },

    viewWasAttached: function () {

        this.icon.boundsForView = function (parentBounds, oldBounds) {
            return { x : 5, y : 2, width : 20, height : 20, unit : "px", position: 'absolute' };
        };
        this.icon.viewWasAttached = function () {
            this.getDiv().innerHTML = this.parentView.iconText; 
            this.getDiv().style.zIndex = 6666;

        };
        this.icon.initView(this.id + ".icon");

        this.iconRight.boundsForView = function (parentBounds, oldBounds) {
            return { x : parentBounds.width - 5 - 20 , y : 0, width : 30, height : 30, unit : "px", position: 'absolute' };
        };
        this.iconRight.text = this.iconTextRight;
        this.iconRight.fontFamily = "FontAwesome,Verdana";
        this.iconRight.fontSize = 18;
        this.iconRight.fontColor = 'darkgrey';
        this.iconRight.fillLineHeight = true;
        this.iconRight.textAlignment = "center";
        this.iconRight.initView(this.id + ".iconRight", this);


        this.textboxDiv.boundsForView = function (parentBounds, oldBounds) {
            var b = { unit : 'px', position: 'absolute'};
            if (this.parentView.iconText!=='') {
                b.x = 30;
                b.width = parentBounds.width - 35;
            } else {
                b.x = 5;
                b.width = parentBounds.width - 10;
            }
            if (this.parentView.iconTextRight!=='') {
                b.width = b.width - 20;
            }

            b.y = 6;

            b.height = parentBounds.height;

            if (this.textbox != undefined) {
                this.textbox.style.top = 0;
                this.textbox.style.left = 0;
                this.textbox.style.width = b.width + b.unit;
                //this.textbox.style.height = this.posH + this.posHUnit;
            }
            return b;
        };
        this.textboxDiv.viewWasAttached = function () {

            if (this.parentView.isTextArea === true ) {
                this.textbox = document.createElement("textarea");
            } else {

                this.textbox = document.createElement("input");
                if (this.parentView.isPassword == false) {
                    this.textbox.setAttribute("type", "text");
                } else {
                    this.textbox.setAttribute("type", "password");
                }
            }

            this.textbox.setAttribute("id", this._ID + ".txt");
            this.textbox.style.border = '0px';
            this.textbox.style.outlineColor =  'transparent';
            this.textbox.style.outlineStyle =  'none';

            var pptr = this.parentView;
            var ptr = this.textbox;


            if (ptr.addEventListener) {
                ptr.addEventListener("input", function () { pptr.onTextChange(); }, false);
                ptr.addEventListener("propertychange", function () { pptr.onTextChange(); }, false);
                ptr.addEventListener("keyup", function () { pptr.onTextChange(); }, false);
                ptr.addEventListener("paste", function () { pptr.onTextChange(); }, false);
            } else {
                ptr.attachEvent("oninput", function () {
                    return (pptr.onTextChange());
                });
                ptr.attachEvent("onpropertychange", function () {
                    return (pptr.onTextChange());
                });
                ptr.attachEvent("onkeyup", function () {
                    return (pptr.onTextChange());
                });
                ptr.attachEvent("onpaste", function () {
                    return (pptr.onTextChange());
                });
            }
            this.getDiv().appendChild(this.textbox);
            this.doResize();
        }
        this.textboxDiv.initView(this.id + ".txtdiv");

        this.getDiv().style.backgroundColor = 'white';
        this.getDiv().style.borderBottom = '2px solid rgb(50, 192, 247)';
        this.getDiv().style.webkitDecoration = 'none';
        this.getDiv().className = "txtDiv";

        if (this.iconText!='') {
            this.attach(this.icon);
            this.icon.setActionDelegate(this, "_leftIconClick");
        }
        if (this.iconTextRight!=='') {
            this.attach(this.iconRight);
            this.iconRight.setActionDelegate(this, "_rightIconClick");

        }
        this.attach(this.textboxDiv);
        this.setPlaceholder(this.placeholderValue);
    }


});



MentatJS.Dropdown = MentatJS.View.extend({

    dataSource: null,

    viewWillLoad: function () {
        this.dd = document.createElement('select');

    },


    viewWasAttached: function () {
        this.getDiv().appendChild(this.dd);
        this.refresh();

    },

    getSelectedItem: function () {
        var idx = this.dd.selectedIndex;
        var id = this.dd.options[idx].value;
        for ( var i = 0; i < this.dataSource.length; i++) {
            if (this.dataSource[i].id == id)
                return this.dataSource[i];
        }
        return null;
    },


    setSelectedItem: function (idToSelect) {

        this.dd.value = idToSelect;

    },



    refresh: function () {
        this.doResize();
        this.dd.style.width = this.bounds.width + this.bounds.unit;
        while (this.dd.hasChildNodes()) {
            this.dd.removeChild(this.dd.lastChild);
        }

        if (this.dataSource!=null) {
            for (var i = 0; i < this.dataSource.length; i++) {
                var obj = this.dataSource[i];
                var id = this.dataSource[i].id;
                var val = this.dataSource[i].text;

                var opt = document.createElement('option');
                opt.value = id;
                opt.text = val;
                this.dd.appendChild(opt);
            }
        }
        this.dd.ptr = this;
        this.dd.onchange = function (sender) {
            if (this.ptr!=undefined) {
                if (this.ptr!=null) {
                    if (this.ptr.actionDelegate != null) {
                        this.ptr.actionDelegate[this.ptr.actionDelegateEventName](this.ptr,'onchange');
                    }
                }
            }
        }


    }





});



MentatJS.Image = MentatJS.View.extend({


    imageURI : '',
    imageWidth : 48,
    imageHeight : 48,

    viewWillLoad : function() {
        this.refresh();
    },

    setImageURI: function (uri) {
        this.imageURI = uri;
        this.refresh();
    },

    imageClicked: function (sender) {
        if (this.actionDelegate!=null) {
            this.actionDelegate[this.actionDelegateEventName](sender);
        }
    },

    refresh : function() {
        while (this.getDiv().hasChildNodes()) {
            this.getDiv().removeChild(this.getDiv().lastChild);
        }

        this.getDiv().style.zIndex = 1;
        var img = document.createElement("img");
        img.style.width = this.imageWidth + "px";
        img.style.height = this.imageHeight = "px";
        img.src = this.imageURI;
        img.uiimageRef = this;
        img.onclick = function (e) {
            this.uiimageRef.imageClicked(this.uiimageRef);
        };
        this.getDiv().appendChild(img);

    }
    
});

MentatJS.Image.imageFromLayout = function (parentView, elem_id, id) {
    var ret = new MentatJS.Image();
    var el = parentView.getDiv().querySelector("#" + elem_id);
    ret.NO_RESIZE = true;
    ret.initFromLayout(id,el);
    parentView.attach(ret);
    return ret;
}


MentatJS.SegmentedButton = MentatJS.View.extend({


    buttonsOptions : null,


    viewWillLoad : function() {
        this.buttonsOptions = new Array();
    },


    viewWasAttached : function() {

        for (var i = 0; i < this.buttonsOptions.length; i++) {

            var id = this.buttonsOptions[i].id;
            var text = this.buttonsOptions[i].text;
            var icon = this.buttonsOptions[i].icon;

            var b = new MentatJS.Button();
            b.parent = this;
            b.stateID = id;
            b.index = i;
            b.text = text;
            b.isToggle = true;
            b.initView(this.id+'.'+i);
            b.boundsForView = function(parentBounds, oldBounds) {
                var w = this.parent.bounds.width/this.parent.buttonsOptions.length;
                var x = (this.index*w-(this.index+1));
                return {
                    x: x,
                    y: 0,
                    width: w,
                    height: 30,
                    unit: 'px',
                    position: 'absolute'
                };

            }
            b.viewWasAttached = function() {

                // left, middle or right ?
                var left = '3px';
                var right = '3px;'

                if ((this.index == 0 ) && (this.parent.buttonsOptions.length>1))
                    right = '0px'

                if (this.index > 0) {
                    left = '0px';
                    right = '0px';
                }

                if (this.index == this.parent.buttonsOptions.length-1)
                    right = '3px';

                this.getDiv().style.borderTopLeftRadius = left;
                this.getDiv().style.borderTopRightRadius = right;
                this.getDiv().style.borderBottomLeftRadius = left;
                this.getDiv().style.borderBottomRightRadius = right;

                this.getDiv().style.fontWeight = 'normal';

                this.getDiv().btnPtr = this;

                this.onClickEvent = function (sender) {


                    var event_param = {
                        button_id: this.id
                    };

                    MentatJS.Application.instance.session_event(MentatJS.kEvent_User,'SegmentedButton.Click', event_param);

                    var ptr = this.btnPtr;
                    this.btnPtr.flash(function() {
                        if (ptr.actionDelegate != null) {
                            var str = 'ptr.actionDelegate.' + ptr.actionDelegateEventName + '(ptr,\'onclick\');';
                            eval(str);
                        }
                    });
                };

                this._div.addEventListener('click', this.onClickEvent);



            }
            b.OnClick = function() {
                this.parent.stateHasChanged( this.stateID );
            };
            b.setActionDelegate(this, 'buttonPressed');
            this.attach(b);
            if (this.buttonsOptions[i].enabled!=undefined) {
                if (this.buttonsOptions[i].enabled==false) {
                    b.setEnabled(false);
                }
            }
            this.buttonsOptions[i].btn = b;
        }

    },

    buttonPressed: function (sender) {
        var sid = sender.stateID;
        this.setCurrent(sid);
        if (this.actionDelegate!=null) {
            this.actionDelegate[this.actionDelegateEventName](this,sid);
        }


    },

    addButton : function ( options ) {
        if (this.buttonsOptions===null) {
            this.buttonsOptions = new Array();
        }
        this.buttonsOptions.push(options);
    },

    setCurrent: function (buttonID) {
        for (var i = 0; i < this.buttonsOptions.length; i++) {
            this.buttonsOptions[i].btn.setToggled(false);
            if (this.buttonsOptions[i].id==buttonID) {
                this.buttonsOptions[i].btn.setToggled(true);
            }
        }


    }



});


MentatJS.ToggleButton = MentatJS.View.extend({

    buttonElem : null,
    action: null,
    isToggled: false,


    initView : function(id) {

        this.id = id;
        this._div = document.createElement('div');
        this._div.id = id;
        this._div.style.height = '28px';
        this._div.style.color = 'blue';
        this._div.style.fontWeight = 'bolder';
        this._div.style.fontFamily = 'FontAwesome,Verdana';
        this._div.style.fontSize = '14px';
        this._div.className = 'fa';


        if (this.viewWillLoad != null)
            this.viewWillLoad();
        if (this.viewDidLoad != null)
            this.viewDidLoad();
        this.doResize();
        this.setToggled(this.isToggled);
    },

    doResize: function () {
        if (this.viewWillResize != null) {
            this.viewWillResize();
        }
        this.resize();

        this._div.style.lineHeight = this.height + this.unit;
        this._div.style.textAlign = 'center';

        if (this.subViews==null) this.subViews = new Array();

        for (var i = 0; i < this.subViews.length; i++) {
            this.subViews[i].doResize();
        }
    },


    setToggled: function (t) {
        if (t==true) {
            this.isToggled = true;
            this._div.style.color = 'green';
            this._div.innerHTML = '<i class="fa fa-toggle-on fa-2x"></i>';

        } else {
            this.isToggled = false;
            this._div.style.color = 'red';
            this._div.innerHTML = '<i class="fa fa-toggle-on fa-2x fa-flip-horizontal"></i>';

        }


    },


    onEnableStatusChanged: function (e) {

        if (e == false) {
            this._div.style.border = '1px solid grey';
            this._div.style.color = 'grey';
            var ptr = this;
            removeListener(this._div,'click',this.onClickEvent);

        } else {
            this._div.style.border = '1px solid blue';
            this._div.style.color = 'blue';
            var ptr = this;
            addListener(this._div, 'click', this.onClickEvent);
        }



    },



    viewWasAttached: function () {

        var ptr = this;
        this.doResize();

        this.onClickEvent = function (sender) {

            var event_param = {
                button_id: this.id,
                value: !this.isToggled
            };

            MentatJS.Application.instance.session_event(MentatJS.kEvent_User,'ToggleButton.Click', event_param);

            ptr.flashColor(function() {
                ptr.setToggled(!ptr.isToggled);
                if (ptr.actionDelegate != null) {
                    ptr.actionDelegate[ptr.actionDelegateEventName](ptr,ptr.isToggled);
                }
            });
        };

        addListener(this._div, 'click', this.onClickEvent);
        addListener(this._div, 'mouseover', function (e) {
            this.style.cursor = 'pointer';
        });
        addListener(this._div, 'mouseout', function (e) {
            this.style.cursor = '';
        });

    }




});


function ListItem() {

    this.obj = null;
    this.section = 1;
    this.index = 1;
    this.Selected = false;

}
MentatJS.kNoSelection = 0x00;
MentatJS.kMultipleSelection = 0x01;
MentatJS.kSingleSelection = 0x02;

MentatJS.ListView = MentatJS.View.extend({

    Items : null,
    NoTabIndex : false,
    DataSource : null,
    SelectionMode: MentatJS.kMultipleSelection,
    SectionnedByLetters : false,

    // DEPRECATED ?
    extraSizeRequests : [],

    dataDelegate: null,


    numberOfSections : function () {
        if (this.SectionnedByLetters == false)
            return 1;

        var letters = new Array();

        for (var i = 0; i < this.DataSource.numberOfItems(); i++) {
            var l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                if (letters.indexOf('0-9')==-1)
                    letters.push('0-9');
            }
            else {
                if (letters.indexOf(l) == -1)
                    letters.push(l);
            }
        }
        letters.sort();
        return letters.length;
    },

    alphabetSectionForObjectAtIndex : function (index) { throw "alphabetSectionForObjectAtIndex needs to be implemented."; },

    rowMargin: function (section_index,item_index) { return 0; },
    backgroundColor: function () { return ''; },

    titleForSection : function (section_index) {
        if (this.SectionnedByLetters == false)
            return "";

        var letters = new Array();

        for (var i = 0; i < this.DataSource.numberOfItems(); i++) {
            var l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                if (letters.indexOf('0-9') == -1)
                    letters.push('0-9');
            }
            else {

                if (letters.indexOf(l) == -1)
                    letters.push(l);
            }
        }
        letters.sort();
        return letters[section_index - 1];
    },

    numberOfItemsForSection : function (section_index) {
        if (this.SectionnedByLetters == false)
            return this.DataSource.numberOfItems();
        var ptrthis = this;

        var ret = 0;
        var letters = new Array();
        for (var i = 0; i < this.DataSource.numberOfItems(); i++) {
            var l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                if (letters.indexOf('0-9')==-1)
                    letters.push('0-9');
            }
            else {

                if (letters.indexOf(l) == -1)
                    letters.push(l);
            }
        }
        letters.sort();
        for (i = 0; i < this.DataSource.numberOfItems(); i++) {
            l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                l = '0-9';
            }
            if (l == letters[section_index - 1])
                ret++;
        }
        return ret;

    },

    itemForIndex : function (section_index, item_index) { throw "itemForIndex needs to be implemented."; },
    paddingForSection : function (section_index) { return 10; },
    sizeForItemIndex : function (section_index, item_index) { return [340, 68]; },
    onDoubleClick : function () { ; },

    objectForItemIndex : function (section_index, item_index) {

        if (this.SectionnedByLetters == false)
            return this.DataSource.objectForSortedIndex(item_index - 1);
        var ret = 0;
        var letters = new Array();
        for (var i = 0; i < this.DataSource.numberOfItems(); i++) {
            var l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                if (letters.indexOf('0-9')==-1)
                    letters.push('0-9');
            }
            else {

                if (letters.indexOf(l) == -1)
                    letters.push(l);
            }
        }
        letters.sort();
        for (i = 0; i < this.DataSource.numberOfItems(); i++) {
            l = this.alphabetSectionForObjectAtIndex(i);
            if ((l == '0') || (l == '1') || (l == '2') || (l == '3') || (l == '4') || (l == '5') || (l == '6') || (l == '7') || (l == '8') || (l == '9')) {
                l = '0-9';
            }
            if (l == letters[section_index - 1])
                ret++;
            if (ret == item_index) {
                return this.DataSource.objectForSortedIndex(i);
            }
        }
        return null;
    },

    sizeForSectionHeader : function (section_index) { return [340, 20]; },

    // DEPRECATED ?
    isObjectSelected : function (section_index, item_index) {
        return false;
        // throw "isObjectSelected needs to be implemented.";
    },

    objectSelectionChanged : function (section_index, item_index, selected) {
        //throw "objectSelectionChanged needs to be implemented.";
    },


    onItemClick : function (ctrl, shift, rowID, section_index, item_index) {

        var color = '';
        var arr = null;

        for ( var i = 0; i < this.Items.length; i++) {
            if ((this.Items[i].section == section_index) && (this.Items[i].index == item_index)) {
                arr = [this.Items[i]];
            }
        }
        if (this.SelectionMode === MentatJS.kNoSelection) {
            return;
        }

        var selected = false;
        if (this.SelectionMode === MentatJS.kMultipleSelection) {
            ctrl = true;
            shift = false;
        } else {
            ctrl = false;
            shift = false;
        }

        if ((ctrl == true) && (shift == false)) {
            // ADD A ROW TO THE SELECTION
            color = document.getElementById(rowID).style.backgroundColor;
            if (color == "rgb(173, 216, 230)") {
                document.getElementById(rowID).style.backgroundColor = 'transparent';
                if (arr.length > 0) {
                    arr[0].Selected = false;
                    selected = false;
                }
            } else {
                document.getElementById(rowID).style.backgroundColor = 'rgb(173,216,230)';
                if (arr.length > 0) {
                    arr[0].Selected = true;
                    selected = true;
                }
            }
            this.objectSelectionChanged(section_index, item_index, selected);
        }
        else if ((ctrl == false) && (shift == false)) {
            // REMOVE SELECTION AND SELECT THIS ROW
            for (var i = 0; i < this.Items.length; i++) {
                if ((this.Items[i].section == section_index) && (this.Items[i].index == item_index)) continue;
                document.getElementById(this.id + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                this.Items[i].Selected = false;
                this.objectSelectionChanged(this.Items[i].section, this.Items[i].index, this.Items[i].Selected);
            }
            color = document.getElementById(rowID).style.backgroundColor;
            if (color == "rgb(173, 216, 230)") {
                document.getElementById(rowID).style.backgroundColor = 'transparent';
                if (arr.length > 0) {
                    arr[0].Selected = false;
                    selected = false;
                }
            } else {
                document.getElementById(rowID).style.backgroundColor = 'rgb(173, 216, 230)';
                if (arr.length > 0) {
                    arr[0].Selected = true;
                    selected = true;
                }
            }
            this.objectSelectionChanged(section_index, item_index, selected);

        }
        else if ((ctrl == false) && (shift == true)) {
            // RANGE SELECTION
            var index = -1;
            var reverse = false;
            for (var i = 0; i < this.Items.length; i++) {
                if (index == -1) {
                    if (this.Items[i].Selected == true) {
                        index = i;

                        if ((this.Items[i].section == section_index && this.Items[i].index > item_index) || (this.Items[i].section > section_index)) {
                            reverse = true;
                            break;
                        }

                    }
                }
                if ((i >= index) && (index > -1)) {
                    document.getElementById(this.id + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).style.backgroundColor = 'rgb(173, 216, 230)';
                    this.Items[i].Selected = true;
                    this.objectSelectionChanged(this.Items[i].section, this.Items[i].index, this.Items[i].Selected);

                    if ((this.Items[i].section == section_index) && (this.Items[i].index == item_index)) {
                        // remove the ones after
                        index = -2;
                    }
                } else
                if (index == -2) {
                    document.getElementById(this.id + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                    this.Items[i].Selected = false;
                    this.objectSelectionChanged(this.Items[i].section, this.Items[i].index, this.Items[i].Selected);
                }
            }

            if (reverse == true) {

                for (var i = index; i >= 0; i--) {

                    document.getElementById(this.id + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).style.backgroundColor = 'rgb(173, 216, 230)';
                    this.Items[i].Selected = true;
                    this.objectSelectionChanged(this.Items[i].section, this.Items[i].index, this.Items[i].Selected);

                    if ((this.Items[i].section == section_index) && (this.Items[i].index == item_index)) {
                        index = -2;
                    }
                    else if (index == -2) {
                        //$('#' + this._ID + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).css({ "background-color": "transparent" });
                        document.getElementById(this.id + "_section" + this.Items[i].section + "Cell" + this.Items[i].index).style.backgroundColor = 'transparent';
                        this.Items[i].Selected = false;
                        this.objectSelectionChanged(this.Items[i].section, this.Items[i].index, this.Items[i].Selected);
                    }
                }

            }
        }

        if (this.actionDelegate!=undefined) {
            if (this.actionDelegate!=null) {
                this.actionDelegate[this.actionDelegateEventName](this);
            }
        }

        if (this.selectionMayHaveChanged!=undefined) {
            this.selectionMayHaveChanged();
        }
    },

    GetSelectedObjects : function () {
        var arr = [];
        for ( var i = 0 ; i < this.Items.length; i++) {
            if (this.Items[i].Selected==true) {
                arr.push(this.Items[i]);
            }
        }
        var ret = new Array();
        for (var i = 0; i < arr.length; i++) {

            var obj = this.objectForItemIndex(arr[i].section, arr[i].index);
            ret.push(obj);
        }
        return ret;
    },

    DEPRECATEDGetSelectedItems : function () {
        return window.top.$.grep(this.Items, function (o) { return o.Selected == true; });
    },


    extraSizeRequested : function (section_index,item_index) {
        for (var i = 0; i < this.extraSizeRequests.length; i++) {
            var o = this.extraSizeRequests[i];
            if ((o.section_index==section_index) && (o.item_index==item_index) ) {
                return [o.width, o.height];
            }
        }

        return [0,0];
    },

    requestExtraSize : function (section_index,item_index,width,height) {
        var found = false;

        for (var i = 0; i < this.extraSizeRequests.length; i++) {
            var o = this.extraSizeRequests[i];
            if ((o.section_index==section_index) && (o.item_index==item_index) ) {
                o.width = width;
                o.height = height;
                found = true;
            }
        }
        if (found==false) {
            var o = {};
            o.section_index = section_index;
            o.item_index = item_index;
            o.width = width;
            o.height = height;
            this.extraSizeRequests.push(o);
        }

    },

    recalculateSize: function () {

        var item_y = 0;
        var ptrthis = this;
        var nbSections = this.numberOfSections();
        for (var section_index = 1; section_index <= nbSections; section_index++) {
            var nbItems = this.numberOfItemsForSection(section_index);
            if (nbItems == 0) continue;
            if (this.customHeaderCell == undefined) {
                var title = this.titleForSection(section_index);
                if (title != "") {
                    var headerSize = this.sizeForSectionHeader(section_index);
                    var title_div = document.getElementById(this.id + "_section" + section_index + "Title");
                    if (title_div!=undefined) {
                        title_div.setAttribute("style", "padding:0px;left:0px;top:" + item_y + "px;width:" + headerSize[0] + "px;height:" + headerSize[1] + "px;position:absolute;background-color:#3b80c7;text-color:white;color:white;"); //rgb(47, 106, 187)
                    }
                    item_y += parseInt(headerSize[1]);
                }
            } else {
                var view = this.findViewNamed(this.id + "_section" + section_index + "Title");
                if (view!=undefined) {
                    view.item_y = item_y;
                    item_y += parseInt(view.size[1]);
                }

            }
            for (var i = 1; i <= nbItems; i++) {


                var cell = document.getElementById(this.id + "_section" + section_index + "Cell" + i);

                var cellSize = this.sizeForItemIndex(section_index, i);
                var extraSize = this.extraSizeRequested(section_index,i);
                cellSize[0] = cellSize[0] + extraSize[0];
                cellSize[1] = cellSize[1] + extraSize[1];

                cell.setAttribute("style", "left:0px;top:" + item_y + "px;width:" + cellSize[0] + "px;height:" + cellSize[1] + "px;position:absolute;");
                item_y += parseInt(cellSize[1]);

            }

        }

    },


    reloadData : function () {
        this.Items = new Array();

        this.getDiv().style.backgroundColor = this.backgroundColor();
        this.getDiv().style.outline = 'none';

        for (var j = this.Items.length - 1; j == 0; j--) {
            var item = this.Items[j];
            if (item != null) {
                try {
                    this.getDiv().removeChild(item.obj.getDiv());
                } catch (e) { throw e; }
                item.obj = null;
                this.Items.pop();
            }
        }
        while (this.getDiv().hasChildNodes()) {
            this.getDiv().removeChild(this.getDiv().lastChild);
        }


        var item_y = 0;
        var ptrthis = this;

        this.scrollContainer = document.createElement('div');

        //this.getDiv().appendChild(this.scrollContainer);

        //this.getDiv().style.overflow = 'hidden';
        var nbSections = this.numberOfSections();
        for (var section_index = 1; section_index <= nbSections; section_index++) {

            var nbItems = this.numberOfItemsForSection(section_index);
            if (nbItems == 0) continue;


            if (this.customHeaderCell == undefined) {
                var title = this.titleForSection(section_index);
                if (title != "") {
                    var headerSize = this.sizeForSectionHeader(section_index);
                    var title_div = document.createElement("div");
                    title_div.id = this.id + "_section" + section_index + "Title";
                    // background-color:#3b80c7;
                    title_div.setAttribute("style", "background-color:blue;padding:0px;left:0px;top:" + item_y + "px;width:" + headerSize[0] + "px;height:" + headerSize[1] + "px;position:absolute;text-color:white;color:white;"); //rgb(47, 106, 187)
                    item_y += parseInt(headerSize[1]);
                    title_div.innerHTML = "&nbsp;" + title;

                    // SCROLLFIX this.getDiv().appendChild(title_div);
                    //this.scrollContainer.appendChild(title_div);
                    this.getDiv().appendChild(title_div);

                    title_div = null; // leak if not freed ?
                }
            } else {
                var customH = new MentatJS.View();
                customH.size = this.sizeForSectionHeader(section_index);
                customH.item_y = item_y;
                item_y += parseInt(customH.size[1]);
                customH.boundsForView = function (parentBounds, oldBounds) {
                    return {
                        x: 0,
                        y: this.item_y,
                        width: this.size[0],
                        height: this.size[1],
                        unit: 'px',
                        position: 'absolute'
                    };
                };
                customH.viewWasAttached = function () {
                    //this.div.style.backgroundColor = 'rgb(47,106,187)';
                    //this.div.style.color = 'white';
                };
                customH.initView(this.id + "_section" + section_index + "Title");
                this.attach(customH);
                this.customHeaderCell(customH, section_index);

                // add row margin
                item_y += this.rowMargin(section_index,-1);
            };

            for (var i = 1; i <= nbItems; i++) {


                var cell = document.createElement("div");
                cell.id = this.id + "_section" + section_index + "Cell" + i;
                var cellSize = this.sizeForItemIndex(section_index, i);
                cell.setAttribute("style", "left:0px;top:" + item_y + "px;width:" + cellSize[0] + "px;height:" + cellSize[1] + "px;position:absolute;");
                item_y += parseInt(cellSize[1]);

                var item = this.itemForIndex(section_index, i);
                // TODO+ check is View ?
                item.cellSize = cellSize;
                item.boundsForView = function (parentBounds,oldBounds) {
                    return {
                        x:0,
                        y:0,
                        width:this.cellSize[0],
                        height: this.cellSize[1],
                        unit:'px',
                        position:'absolute'
                    };
                }
                item.bounds = item.boundsForView(null,null);
                if (item.getDiv() == null)
                    throw "An Item in a collection must contain a div. (Subclass View)";

                cell.appendChild(item.getDiv());
                if (item.viewWasAttached != undefined) {
                    item.bounds = item.boundsForView(this.parentView.bounds,null);
                    item.viewWasAttached();
                    item.doResize();
                }
                var storeItem = new ListItem();
                if (this.isObjectSelected(section_index, i) == true) {
                    cell.style.backgrounColor = 'rgb(173, 216, 230)';
                    storeItem.Selected = true;
                }

                storeItem.obj = item;
                storeItem.section = section_index;
                storeItem.index = i;
                this.Items.push(storeItem);


                var rowID = cell.id;
                cell.section_index = section_index;
                cell.item_index = i;
                cell.ptr = this;
                cell.addEventListener('click',function (e) {
                    this.ptr.onItemClick(e.ctrlKey, e.shiftKey, this.id, this.section_index, this.item_index);
                });

                this.getDiv().appendChild(cell);

                if (this.dataDelegate!=null) {
                    if (this.dataDelegate['listViewCellWasAttached']!=undefined) {
                        this.dataDelegate['listViewCellWasAttached'](this, item, section_index, i);
                    }
                }

                //this.scrollContainer.appendChild(cell);

                cell = null;

                item_y += this.rowMargin(section_index,i);
            }


        }

        this.scrollContainer.style.width = this.getDiv().style.width;
        this.scrollContainer.style.height = item_y + "px";



    },


    viewDidLoad : function () {

        if (this.getDiv() != null) {

            if (this.NoTabIndex==false)
                this.getDiv().tabIndex = '-1';


            this.getDiv().style.overflowY = 'auto';
            this.getDiv().style.overflowX = 'hidden';


        }

        this.getDiv().ViewCtrl = this;

        this.Items = new Array();
        this.DataSource = new MentatJS.DataSource();


        this.reloadData();
    }








});


function listview_handleDoubleClick(e) {

    if (e.currentTarget.ViewCtrl != null) {

        if (e.currentTarget.ViewCtrl.onDoubleClick!=null){
            e.currentTarget.ViewCtrl.onDoubleClick();
        }

    }


};

function listview_handleKeyUp(e) {


    var section = 0;
    var index = 0;

    if ((e.keyCode == 38) || (e.keyCode == 40)) {

        var arr = e.currentTarget.ViewCtrl.GetSelectedItems();

        if (arr.length > 0) {
            section = arr[0].section;
            index = arr[0].index;

            if (e.keyCode == 38) {
                if (index > 1) {
                    index = index - 1;
                } else {
                    if (section > 1) {
                        section = section - 1;
                        index = e.currentTarget.ViewCtrl.numberOfItemsForSection(section);
                    } else {
                        return;
                    }
                }
            } else if (e.keyCode == 40) {

                if (index < e.currentTarget.ViewCtrl.numberOfItemsForSection(section)) {
                    index++;
                } else {

                    if (section + 1 <= e.currentTarget.ViewCtrl.numberOfSections()) {
                        section++;
                        index = 1;
                    } else {
                        return;
                    }
                }
            }


            e.currentTarget.ViewCtrl.ClearSelection();
            e.currentTarget.ViewCtrl.onItemClick(false, false, e.currentTarget.ViewCtrl._ID + "_section" + section + "Cell" + index, section, index);

        }


        e.preventDefault();
        e.stopPropagation();
        e.returnValue = false;
    }

};
MentatJS.Popover = Class.extend({
    id: '',
    title: '',
    width: 300,
    height: 400,
    popoverView: null,
    popoverContentView: null,
    anchorElement: null,
    containerView: null,
    navigationController: null,
    fixedPositioning: false,
    fixedBounds: {},
    actionDelegate : null,
    actionDelegateEventName : '',



    setActionDelegate : function (d,n) {
        this.actionDelegate = d;
        this.actionDelegateEventName = n;
        var ptr = this;
    },


    initPopover: function (_id, _containerView, _anchorElement) {
        "use strict";

        this.id = _id;
        this.anchorElement = _anchorElement;
        this.containerView = _containerView;

        this.popoverView = new MentatJS.View();
        this.popoverView.popoverRef = this;
        this.popoverView.boundsForView = function (parentBounds) {
            var x = 0;
            var y = 0;

            if (this.popoverRef.fixedPositioning === true) {
                return this.popoverRef.fixedBounds;
            }

            var width = this.popoverRef.width;
            var height = this.popoverRef.height;
            var sx = this.popoverRef.anchorElement.style.left;
            var sy = this.popoverRef.anchorElement.style.top;
            if (sx.indexOf('px')>-1) {
                sx = sx.substr(0,sx.indexOf('px'));
            }
            if (sy.indexOf('px')>-1) {
                sy = sy.substr(0,sy.indexOf('px'));
            }
            x = parseInt(sx);
            y = parseInt(sy);
        }
        this.popoverView.viewWasAttached = function () {
            this.setLayerHeight(99999);

            this.title = new MentatJS.Label();
            this.title.text = this.popoverRef.title;
            this.title.fontColor = 'white';
            this.title.fontSize = 12 + 'px';
            this.title.fillLineHeight = true;
            this.title.boundsForView = function () {
                return {
                    x: 15,
                    y: 0,
                    width: 150,
                    height: 37,
                    unit: 'px',
                    position: 'absolute'
                };
            };
            this.title.initView(this.id + ".title");
            this.attach(this.title);

            this.close = new MentatJS.Label();
            this.close.boundsForView = function (parentBounds) {
                return {
                    x: parentBounds.width - 15 - 20,
                    y: 0,
                    width: 37,
                    height: 37,
                    unit: "px",
                    position: "absolute"
                };
            };
            this.close.fillLineHeight = true;
            this.close.fontColor = "white";
            this.close.fontFamily = 18;
            this.close.textAlignment = "center";
            this.close.text = "<i class='fa fa-close'></i>";
            this.close.initView(this.id + ".close");
            this.attach(this.close);

            this.close.setActionDelegate(this.popoverRef, "cancelPopover");


            this.content = new MentatJS.View();
            this.content.boundsForView = function (parentBounds) {
                return {
                    x: 3,
                    y: 37,
                    width: parentBounds.width - 6,
                    height: parentBounds.height - 37 -3,
                    unit: 'px',
                    position: 'absolute'
                }
            }
            this.content.viewWasAttached = function () {
                this.getDiv().style.backgroundColor = 'white';
            }
            this.content.initView(this.id + ".content");
            this.attach(this.content);

            this.getDiv().style.borderRadius = '5px';
            this.getDiv().style.backgroundColor = 'rgb(47,106,187)';
            //this.getDiv().style.opacity = 0.9;
        };
        this.popoverView.initView(this.id + ".popover");

        this.containerView.attach(this.popoverView);

        this.navigationController = new MentatJS.NavigationController();
        this.navigationController.initNavigationControllerWithRootView(this.id + ".navigationController", this.popoverView.content );

    },

    cancelPopover: function () {
        "use strict";
        this.closeWithStatus(null);
    },

    closeWithStatus : function (status) {
        var obj = null;
        if (status!==null) {
            obj = extend(status);
        }
        this.navigationController.clear(); // close the viewcontroller in the popup correctly
        this.containerView.detach(this.popoverView.id);
        this.popoverView = null;
        if (this.actionDelegate !== null) {
            this.actionDelegate[this.actionDelegateEventName](this,obj);
        }


    }



});

MentatJS.DropdownSearch = MentatJS.View.extend({

    dataSource: null,
    selectedItem: null,
    selectedCell: null,

    // list fns

    alphabetSectionForObjectAtIndex: function (item) {
        return ' ';
    },
    cellForObjectAtIndex: function (item) {
        return new MentatJS.View();
    },

    cellForNoSelection: function () {
        return new MentatJS.View();
    },


    itemSelected: function (item) {
        this.button.setToggled(false);

        this._onDisplayList();
        if (this.actionDelegate!=undefined) {
            this.actionDelegate[this.actionDelegateEventName](this,this.selectedItem);
        }
    },

    _drawSelectedCell: function () {
        this.selectedCell.detachAllChildren();
        var cell = null;
        if (this.selectedItem!=null) {
            cell = this.cellForObjectAtIndex(this.selectedItem);
        } else {
            cell = this.cellForNoSelection();
        }
        // override all click events on the cell
        this.selectedCell.attach(cell);

        MentatJS.applyClickThrough(this.selectedCell, this, "_cellClickThrough");


    },
    _cellClickThrough: function () {
        this.button.onClickEvent();

    },

    viewWillLoad: function () {
        this.selectedItem = null;
        this.selectedCell = new MentatJS.View();
        this.button = new MentatJS.Button();
        this.pane = new MentatJS.View();

    } ,
    viewWasAttached: function () {
        this.button.boundsForView = function (parentBounds, oldBounds) {
            return {
                x: 0,
                y: 0,
                width: parentBounds.width,
                height: 30,
                unit: 'px',
                position: 'absolute'
            };
        };
        this.button.parent = this;
        this.button.useDiv = true;
        this.button.initView(this.id + ".button");
        this.button.setActionDelegate(this, '_onDisplayList');
        this.button.isToggle = true;
        this.attach(this.button);
        this.button.setText('<div style="float:right;"><i class="fa fa-sort"/>&nbsp;&nbsp;&nbsp;</div>');

        this.selectedCell.boundsForView = function (parentBounds, oldBounds) {
            return {
                x: 15,
                y: 5,
                width: parentBounds.width - 30,
                height: 20,
                unit: 'px',
                position: 'absolute'
            };
        };
        this.selectedCell.parent = this;
        this.selectedCell.initView(this.id + ".view");
        //this.selectedCell.setActionDelegate(this, '_onDisplayList');
        this.attach(this.selectedCell);
        this.selectedCell.getDiv().pointerEvents = 'none';
        //this.selectedCell.getDiv().pointer = ''

        /*
        this.selectedCell.setActionDelegate(this,'_cellClickThrough');
        var ptr = this.selectedCell;
        this.selectedCell.onClickEvent = function (sender) {
            if (ptr.actionDelegate != null) {
                ptr.actionDelegate[ptr.actionDelegateEventName](ptr,'onclick');
            }
        };

        addEventListener(this.selectedCell.getDiv(), 'click', this.selectedCell.onClickEvent);
        addEventListener(this.selectedCell.getDiv(), 'mouseover', function (e) {
            this.style.cursor = 'pointer';
        });
        addEventListener(this.selectedCell.getDiv(), 'mouseout', function (e) {
            this.style.cursor = '';
        });
        */
        this._drawSelectedCell();



        this.pane.boundsForView = function (parentBounds,oldBounds) {
            return {
                x: 30/2,
                y: 30,
                width: parentBounds.width - 30,
                height: 150,
                unit: 'px',
                position: 'absolute'
            };
        };
        this.pane.viewWillLoad = function () {
            this.search = new MentatJS.TextField();
            this.list = new MentatJS.ListView();
        };

        this.pane.viewWasAttached = function () {
            this.getDiv().style.border = '2px solid rgb(50, 192, 247)';
            this.getDiv().style.backgroundColor = 'white';
            this.setLayerHeight(9999);

            this.search.iconText = '<i class="fa fa-search"/>';
            this.search.boundsForView = function (parentBounds, oldBounds) {
                return {
                    x: 2,
                    y: 2,
                    width: parentBounds.width - 4,
                    height: 30,
                    unit: 'px',
                    position: 'absolute'
                };
            };
            this.search.initView(this.id + ".search");
            this.attach(this.search);

            this.list.parentView = this;
            this.list.boundsForView = function (parentBounds, oldBounds) {
                return {
                    x: 0,
                    y: 34,
                    width: parentBounds.width,
                    height: parentBounds.height - 34,
                    unit: 'px',
                    position: 'absolute'
                };
            };
            this.list.parent = this;
            this.list.singleSelection = true;
            this.list.alphabetSectionForObjectAtIndex = function (item) {
                return this.parentView.parentView.alphabetSectionForObjectAtIndex(item);
            };
            this.list.sizeForSectionHeader = function (section) {
                return [this.parentView.bounds.width,20];
            };
            this.list.sizeForItemIndex = function (section,item) {
                return [this.parentView.bounds.width,20];
            };
            this.list.itemForIndex = function (section,index) {
                var item = this.objectForItemIndex(section,index);
                return this.parentView.parentView.cellForObjectAtIndex(item);
            };
            this.list.selectionMayHaveChanged = function () {
                var arr = this.GetSelectedObjects();
                if (arr.length>0) {
                    this.parentView.parentView.selectedItem = JSON.parse(JSON.stringify(arr[0]));
                    this.parentView.parentView.itemSelected(this.parentView.parentView.selectedItem);

                } else {
                    this.parentView.parentView.selectedItem = null;
                }
            };
            this.list.initView(this.id + "_lst");
            this.list.DataSource = this.parentView.dataSource;
            this.attach(this.list);

            this.parentView._drawSelectedCell();

        };
        this.pane.parentView = this;
        this.pane.initView(this.id + ".pane");
        this.attach(this.pane);
        this.pane.setVisible(false);

    },

    _onDisplayList: function () {
        this.pane.setVisible(this.button.isToggled);
        if (this.button.isToggled==true) {

            this.pane.list.reloadData();


        } else {
            this._drawSelectedCell();
        }
    }


});

MentatJS.TableView = MentatJS.View.extend({

    delegate: null,
    viewHeaderContainer: null,
    viewHeader: null,

    viewContentContainer: null,
    viewContent: null,

    dataSource: null,

    setDelegate: function (_delegate) {
        "use strict";
        this.delegate = _delegate;
    },

    heightForHeader: function (tableView) {
        "use strict";
        return 30;
    },
    numberOfColumns: function (tableView) {
        "use strict";
        return 1;
    },

    widthForColumn: function (tableView,index) {
        "use strict";
        return 100;
    },
    titleForColumn: function (tableView,index) {
        "use strict";
        return "COLUMN";
    },
    numberOfRows: function (tableView) {
        "use strict";
        if (this.dataSource !== null) {
            return this.dataSource.numberOfItems();
        }
        return 0;
    },
    heightForRow: function (tableView, index) {
        "use strict";
        return 30;
    },
    cellForPath: function (tableView, cell, path) {
        "use strict";

    },



    viewWillLoad: function () {
        "use strict";
        if (this.delegate === null) {
            this.delegate = this;
        }
    },
    viewWasAttached: function () {
        "use strict";
        //this.reload();
    },


    reload: function () {
        "use strict";
        this.renderUI();
    },


    renderUI: function () {
        "use strict";

        this.viewHeaderContainer = new MentatJS.View();
        this.viewHeaderContainer.tableRef = this;
        this.viewHeaderContainer.boundsForView = function (parentBounds) {
            var headerHeight = (this.parentView.delegate["heightForHeader"] === undefined) ? this.parentView["heightForHeader"](this.tableRef) : this.parentView.delegate["heightForHeader"](this.tableRef);
            return {
                x: 0,
                y: 0,
                width: parentBounds.width,
                height: headerHeight,
                unit: "px",
                position: "absolute"
            };
        };
        this.viewHeaderContainer.viewWasAttached = function () {
            this.getDiv().style.overflowX = 'hidden';

        };
        this.viewHeaderContainer.initView(this.id + ".headerContainer");
        this.attach(this.viewHeaderContainer);

        this.viewHeader = new MentatJS.View();
        this.viewHeader.tableRef = this;
        this.viewHeader.boundsForView = function (parentBounds) {
            var nbCols = (this.tableRef.delegate["numberOfColumns"] === undefined) ? this.tableRef["numberOfColumns"](this.tableRef) : this.tableRef.delegate["numberOfColumns"](this.tableRef);
            var size = 0;
            for (var i = 0; i < nbCols; i++) {
                size += (this.tableRef.delegate["widthForColumn"] === undefined) ? this.tableRef["widthForColumn"](this.tableRef, i) : this.tableRef.delegate["widthForColumn"](this.tableRef, i);
            }
            return {
                x: 0,
                y: 0,
                width: size,
                height: parentBounds.height,
                unit: "px",
                position: "absolute"
            };
        };
        this.viewHeader.viewWasAttached =  function () {
            //this.getDiv().style.backgroundColor = "blue";

            var nbCols = (this.tableRef.delegate["numberOfColumns"] === undefined) ? this.tableRef["numberOfColumns"](this.tableRef) : this.tableRef.delegate["numberOfColumns"](this.tableRef);
            var size = 0;
            for (var i = 0; i < nbCols; i++) {
                var colSize = (this.tableRef.delegate["widthForColumn"] === undefined) ? this.tableRef["widthForColumn"](this.tableRef, i) : this.tableRef.delegate["widthForColumn"](this.tableRef, i);
                var cell = new MentatJS.View();
                cell.columnStart = size;
                cell.columnIndex = i;
                cell.columnWidth = colSize;
                cell.tableRef = this.tableRef;
                cell.boundsForView = function (parentBounds) {
                    return {
                        x: this.columnStart,
                        y: 0,
                        width: this.columnWidth,
                        height: parentBounds.height,
                        unit: "px",
                        position: "absolute"
                    };
                };
                cell.viewWasAttached = function () {
                    var r = Math.floor((Math.random() * 255) + 1);
                    var g = Math.floor((Math.random() * 255) + 1);
                    var b = Math.floor((Math.random() * 255) + 1);
                    this.getDiv().style.backgroundColor = "rgb("+r+","+g+","+b+")";
                    this.getDiv().style.color = "white";
                    this.getDiv().style.borderRight = "1px solid #afafaf";
                    this.label = new MentatJS.Label();
                    this.label.boundsForView = function (parentBounds) {
                        return {
                            x: 5,
                            y: 0,
                            width: parentBounds.width - 10,
                            height: parentBounds.height,
                            unit: "px",
                            position: "absolute"
                        };
                    };
                    this.label.text = (this.tableRef.delegate["titleForColumn"] === undefined) ? this.tableRef["titleForColumn"](this.tableRef, i) : this.tableRef.delegate["titleForColumn"](this.tableRef, i);
                    this.label.fillLineHeight = true;
                    this.label.textAlignment = 'left';
                    this.label.fontColor = "white";
                    this.label.initView(this.id + ".label");
                    this.attach(this.label);
                }
                cell.initView(this.id + ".cell" + i);
                this.attach(cell);
                size += colSize;
            }
        };
        this.viewHeader.dragScroll = true;
        this.viewHeader.scrollCallback = function (event) {
            this.getDiv().style.top = "0px";
            var x = MentatJS._offsetX + event.clientX - MentatJS._startX;
            if (x>=0)
                x = 0;
            if ( x < -this.bounds.width + this.parentView.bounds.width ) {
                x = -this.bounds.width + this.parentView.bounds.width;
            }
            this.getDiv().style.left = x + 'px';

            this.tableRef.viewContent.getDiv().style.left = x + "px";
        };
        this.viewHeader.initView(this.id + ".header");
        this.viewHeaderContainer.attach(this.viewHeader);

        document.onmousedown = MentatJS.onMouseDown;
        document.ontouchstart = MentatJS.onMouseDown;
        document.onmouseup = MentatJS.onMouseUp;
        document.ontouchend = MentatJS.onMouseUp;

        MentatJS._dragElement = this.viewHeader.getDiv();


        this.viewContentContainer = new MentatJS.View();
        this.viewContentContainer.tableRef = this;
        this.viewContentContainer.boundsForView = function (parentBounds) {
            var headerHeight = (this.tableRef.delegate["heightForHeader"] === undefined) ? this.tableRef["heightForHeader"](this.tableRef) : this.tableRef.delegate["heightForHeader"](this.tableRef);
            return {
                x: 0,
                y: headerHeight + 1,
                width: parentBounds.width,
                height: parentBounds.height - headerHeight - 1,
                unit: "px",
                position: "absolute"
            };
        };
        this.viewContentContainer.viewWasAttached = function () {
            this.getDiv().style.overflowX = 'auto';
            this.getDiv().style.overflowY = 'auto';

        };
        this.viewContentContainer.initView(this.id + ".viewContentContainer");
        this.attach(this.viewContentContainer);

        this.viewContent = new MentatJS.View();
        this.viewContent.tableRef = this;
        this.viewContent.boundsForView = function (parentBounds) {
            var nbCols = (this.tableRef.delegate["numberOfColumns"] === undefined) ? this.tableRef["numberOfColumns"](this.tableRef) : this.tableRef.delegate["numberOfColumns"](this.tableRef);
            var size = 0;
            for (var i = 0; i < nbCols; i++) {
                size += (this.tableRef.delegate["widthForColumn"] === undefined) ? this.tableRef["widthForColumn"](this.tableRef,i) : this.tableRef.delegate["widthForColumn"](this.tableRef, i);
            }
            var nbRows = (this.tableRef.delegate["numberOfRows"] === undefined) ? this.tableRef["numberOfRows"](this.tableRef) : this.tableRef.delegate["numberOfRows"](this.tableRef);
            var height = 0;
            for (var j = 0; j < nbRows; j++) {
                height += (this.tableRef.delegate["heightForRow"] === undefined) ? this.tableRef["heightForRow"](this.tableRef,j) : this.tableRef.delegate["heightForRow"](this.tableRef,j);
            }

            return {
                x: 0,
                y: 0,
                width: size,
                height: height,
                unit: "px",
                position: "absolute"
            };
        };
        this.viewContent.initView(this.id + ".content");
        this.viewContentContainer.attach(this.viewContent);

        this.drawCells();

    },

    drawCells: function () {
        "use strict";
        var x = 0,
            y = 0,
            cellStartX = 0,
            cellStartY = 0,
            nbCols = (this.delegate["numberOfColumns"] === undefined) ? this["numberOfColumns"](this) : this.delegate["numberOfColumns"](this),
            nbRows = (this.delegate["numberOfRows"] === undefined) ? this["numberOfRows"](this) : this.delegate["numberOfRows"](this);

        for ( y = 0; y < nbRows; y++ ) {
            var rowHeight = (this.delegate["heightForRow"] === undefined) ? this["heightForRow"](this,y) : this.delegate["heightForRow"](this,y);

            cellStartX = 0;

            for ( x = 0; x < nbCols; x++) {
                var cellWidth = (this.delegate["widthForColumn"] === undefined) ? this["widthForColumn"](this,x) : this.delegate["widthForColumn"](this,x);
                var cell = new MentatJS.View();
                cell.tableRef = this;
                cell.size = [cellWidth, rowHeight];
                cell.origin = [cellStartX, cellStartY]
                cell.row = y;
                cell.col = x;
                cell.boundsForView = function (parentBounds) {
                    return {
                        x: this.origin[0],
                        y: this.origin[1],
                        width: this.size[0],
                        height: this.size[1],
                        unit: "px",
                        position: "absolute"
                    };
                };
                cell.viewWasAttached = function () {
                    if (this.tableRef !== undefined) {
                        if (this.tableRef.delegate["cellForPath"] === undefined) {
                            this.tableRef["cellForPath"](this.tableRef,this, { row: this.row, col: this.col});
                        } else {
                            this.tableRef.delegate["cellForPath"](this.tableRef,this, { row: this.row, col: this.col});
                        }
                    }
                };
                cell.initView(this.id + ".cell[" + y + "][" + x + "]");
                this.viewContent.attach(cell);


                cellStartX = cellStartX + cellWidth;
            }
            cellStartY = cellStartY + rowHeight;
        }



    }



});
